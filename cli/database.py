# app/cli/database.py - CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
# ==============================================================================

import asyncio
import sys
from pathlib import Path

import typer
from alembic import command
from alembic.config import Config
from sqlalchemy import text

app = typer.Typer(help="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
sys.path.append(str(Path(__file__).parent.parent.parent))

from app.config.settings import settings
from app.database.database import engine, init_db

def get_alembic_config() -> Config:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic"""
    alembic_cfg = Config("alembic.ini")
    alembic_cfg.set_main_option("sqlalchemy.url", settings.DATABASE_URL.replace("+asyncpg", ""))
    return alembic_cfg

@app.command()
def init():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    typer.echo("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    async def _init():
        await init_db()
        typer.echo("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
    
    asyncio.run(_init())

@app.command()
def migrate(message: str = typer.Argument(..., help="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"""
    typer.echo(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {message}")
    
    alembic_cfg = get_alembic_config()
    command.revision(alembic_cfg, autogenerate=True, message=message)
    
    typer.echo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")

@app.command()
def upgrade(revision: str = "head"):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    typer.echo(f"‚¨ÜÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ {revision}")
    
    alembic_cfg = get_alembic_config()
    command.upgrade(alembic_cfg, revision)
    
    typer.echo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

@app.command()
def downgrade(revision: str = "-1"):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    typer.echo(f"‚¨áÔ∏è –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –¥–æ {revision}")
    
    alembic_cfg = get_alembic_config()
    command.downgrade(alembic_cfg, revision)
    
    typer.echo("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–∞—á–µ–Ω—ã!")

@app.command()
def reset(force: bool = typer.Option(False, "--force", help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")):
    """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–í–ù–ò–ú–ê–ù–ò–ï: —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!)"""
    if not force:
        confirm = typer.confirm("‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
        if not confirm:
            typer.echo("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    async def _reset():
        async with engine.begin() as conn:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(lambda sync_conn: 
                sync_conn.execute(text("DROP SCHEMA public CASCADE"))
            )
            await conn.run_sync(lambda sync_conn: 
                sync_conn.execute(text("CREATE SCHEMA public"))
            )
            await conn.run_sync(lambda sync_conn: 
                sync_conn.execute(text("GRANT ALL ON SCHEMA public TO postgres"))
            )
            await conn.run_sync(lambda sync_conn: 
                sync_conn.execute(text("GRANT ALL ON SCHEMA public TO public"))
            )
        
        typer.echo("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        alembic_cfg = get_alembic_config()
        command.upgrade(alembic_cfg, "head")
        
        typer.echo("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!")
    
    asyncio.run(_reset())

@app.command()
def seed():
    """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    typer.echo("üå± –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    async def _seed():
        from app.database.models.user import User, UserLevel
        from app.database.models.transaction import Transaction, TransactionType
        from app.database.database import get_session
        from decimal import Decimal
        
        async with get_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin = User(
                telegram_id=123456789,
                username="admin",
                first_name="Admin",
                balance=Decimal("1000000.00"),
                level=UserLevel.PREMIUM,
                is_premium=True
            )
            session.add(admin)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_data = [
                {"telegram_id": 111111111, "username": "test_bronze", "level": UserLevel.BRONZE, "balance": Decimal("5000.00")},
                {"telegram_id": 222222222, "username": "test_silver", "level": UserLevel.SILVER, "balance": Decimal("15000.00")},
                {"telegram_id": 333333333, "username": "test_gold", "level": UserLevel.GOLD, "balance": Decimal("75000.00")},
                {"telegram_id": 444444444, "username": "test_premium", "level": UserLevel.PREMIUM, "balance": Decimal("150000.00"), "is_premium": True},
            ]
            
            for user_data in users_data:
                user = User(**user_data)
                session.add(user)
            
            await session.commit()
            
            typer.echo("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            typer.echo("üë§ –ê–¥–º–∏–Ω: @admin (ID: 123456789)")
            typer.echo("üë§ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: @test_bronze, @test_silver, @test_gold, @test_premium")
    
    asyncio.run(_seed())

@app.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async def _status():
        try:
            async with engine.begin() as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                result = await conn.execute(text("SELECT version()"))
                version = result.scalar()
                
                typer.echo("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
                typer.echo(f"üìä –í–µ—Ä—Å–∏—è PostgreSQL: {version}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
                result = await conn.execute(text("""
                    SELECT count(*) 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public'
                """))
                tables_count = result.scalar()
                typer.echo(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {tables_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if tables_count > 0:
                    result = await conn.execute(text("SELECT count(*) FROM users"))
                    users_count = result.scalar()
                    typer.echo(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {users_count}")
                    
                    result = await conn.execute(text("SELECT count(*) FROM tasks"))
                    tasks_count = result.scalar()
                    typer.echo(f"üìã –ó–∞–¥–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: {tasks_count}")
                    
                    result = await conn.execute(text("SELECT count(*) FROM transactions"))
                    transactions_count = result.scalar()
                    typer.echo(f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}")
                
        except Exception as e:
            typer.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            sys.exit(1)
    
    asyncio.run(_status())

if __name__ == "__main__":
    app()