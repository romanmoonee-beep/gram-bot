from __future__ import annotations

import json
from decimal import Decimal
from pathlib import Path
from typing import Literal

from pydantic import Field, PostgresDsn, computed_field, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict

class Settings(BaseSettings):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Telegram Stars"""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True,
        extra="ignore"
    )
    
    # ==================== –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    # –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    DEBUG: bool = Field(default=False, description="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    ENVIRONMENT: Literal["development", "staging", "production"] = Field(
        default="development",
        description="–û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    )
    
    # ==================== TELEGRAM BOT ====================
    
    BOT_TOKEN: str = Field(description="–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞")
    BOT_USERNAME: str = Field(description="Username –±–æ—Ç–∞ (–±–µ–∑ @)")
    WEBHOOK_URL: str | None = Field(default=None, description="URL –¥–ª—è webhook")
    WEBHOOK_SECRET: str | None = Field(default=None, description="–°–µ–∫—Ä–µ—Ç –¥–ª—è webhook")
    
    # ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
    
    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DB_HOST: str = Field(default="localhost", description="–•–æ—Å—Ç –ë–î")
    DB_PORT: int = Field(default=5432, description="–ü–æ—Ä—Ç –ë–î")
    DB_USER: str = Field(default="postgres", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î")
    DB_PASSWORD: str = Field(description="–ü–∞—Ä–æ–ª—å –ë–î")
    DB_NAME: str = Field(default="prgram", description="–ò–º—è –ë–î")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
    DB_POOL_SIZE: int = Field(default=50, description="–†–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
    DB_MAX_OVERFLOW: int = Field(default=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–∞")
    DB_ECHO: bool = Field(default=False, description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    USE_PGBOUNCER: bool = Field(default=False, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ PgBouncer")
    
    @computed_field
    @property
    def DATABASE_URL(self) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL –ë–î"""
        return f"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASSWORD}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}"
    
    # ==================== REDIS ====================
    
    REDIS_HOST: str = Field(default="localhost", description="–•–æ—Å—Ç Redis")
    REDIS_PORT: int = Field(default=6379, description="–ü–æ—Ä—Ç Redis")
    REDIS_PASSWORD: str | None = Field(default=None, description="–ü–∞—Ä–æ–ª—å Redis")
    REDIS_DB: int = Field(default=0, description="–ù–æ–º–µ—Ä –ë–î Redis")
    
    @computed_field
    @property
    def REDIS_URL(self) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è URL Redis"""
        auth = f":{self.REDIS_PASSWORD}@" if self.REDIS_PASSWORD else ""
        return f"redis://{auth}{self.REDIS_HOST}:{self.REDIS_PORT}/{self.REDIS_DB}"
    
    # ==================== TELEGRAM STARS –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    # –ö—É—Ä—Å –æ–±–º–µ–Ω–∞ Stars -> GRAM
    STARS_TO_GRAM_BASE_RATE: int = Field(
        default=10, 
        description="–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å: 1 Star = X GRAM"
    )
    
    # –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å –±–æ–Ω—É—Å–∞–º–∏
    STARS_PACKAGES: dict[str, dict] = Field(
        default={
            "basic": {
                "stars": 100,
                "gram": 1000,
                "bonus_percent": 0,
                "title": "üåü –ë–∞–∑–æ–≤—ã–π",
                "description": "100 Stars ‚Üí 1,000 GRAM"
            },
            "economy": {
                "stars": 450,
                "gram": 5000,
                "bonus_percent": 10,
                "title": "üí∞ –≠–∫–æ–Ω–æ–º–∏—è 10%",
                "description": "450 Stars ‚Üí 5,000 GRAM"
            },
            "standard": {
                "stars": 850,
                "gram": 10000,
                "bonus_percent": 15,
                "title": "üí∞ –≠–∫–æ–Ω–æ–º–∏—è 15%",
                "description": "850 Stars ‚Üí 10,000 GRAM"
            },
            "premium": {
                "stars": 2000,
                "gram": 25000,
                "bonus_percent": 20,
                "bonus_gram": 1000,
                "title": "üí∞ –≠–∫–æ–Ω–æ–º–∏—è 20% + –ë–æ–Ω—É—Å!",
                "description": "2000 Stars ‚Üí 25,000 GRAM + 1,000 –±–æ–Ω—É—Å"
            }
        },
        description="–ü–∞–∫–µ—Ç—ã Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏"
    )
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    MIN_DEPOSIT_STARS: int = Field(default=50, description="–ú–∏–Ω–∏–º—É–º Stars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    MAX_DEPOSIT_STARS: int = Field(default=10000, description="–ú–∞–∫—Å–∏–º—É–º Stars –∑–∞ —Ä–∞–∑")
    
    # ==================== –£–†–û–í–ù–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================
    
    # –ü–æ—Ä–æ–≥–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π (–≤ GRAM)
    LEVEL_THRESHOLDS: dict[str, Decimal] = Field(
        default={
            "bronze": Decimal("0"),
            "silver": Decimal("10000"),
            "gold": Decimal("50000"),
            "premium": Decimal("100000")
        },
        description="–ü–æ—Ä–æ–≥–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π"
    )
    
    # –ö–æ–º–∏—Å—Å–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
    LEVEL_COMMISSIONS: dict[str, Decimal] = Field(
        default={
            "bronze": Decimal("0.07"),    # 7%
            "silver": Decimal("0.06"),    # 6%
            "gold": Decimal("0.05"),      # 5%
            "premium": Decimal("0.03")    # 3%
        },
        description="–ö–æ–º–∏—Å—Å–∏–∏ —Å –∑–∞–¥–∞–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º"
    )
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    REFERRAL_BONUSES: dict[str, Decimal] = Field(
        default={
            "bronze": Decimal("1000"),
            "silver": Decimal("1500"),
            "gold": Decimal("2000"),
            "premium": Decimal("3000")
        },
        description="–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"
    )
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    REFERRAL_COMMISSION_RATES: dict[str, dict[str, Decimal]] = Field(
        default={
            "bronze": {"tasks": Decimal("0.05"), "deposits": Decimal("0.10")},
            "silver": {"tasks": Decimal("0.05"), "deposits": Decimal("0.10")},
            "gold": {"tasks": Decimal("0.05"), "deposits": Decimal("0.10")},
            "premium": {"tasks": Decimal("0.05"), "deposits": Decimal("0.10")}
        },
        description="–ü—Ä–æ—Ü–µ–Ω—Ç —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–∑–∞–¥–∞–Ω–∏—è/–ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è)"
    )
    
    # ==================== –õ–ò–ú–ò–¢–´ –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø ====================
    
    # –î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–¥–∞–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—è–º
    DAILY_TASK_LIMITS: dict[str, int] = Field(
        default={
            "bronze": 5,
            "silver": 15,
            "gold": 30,
            "premium": -1  # –ë–µ–∑–ª–∏–º–∏—Ç
        },
        description="–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"
    )
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
    MAX_TASK_REWARDS: dict[str, Decimal] = Field(
        default={
            "bronze": Decimal("500"),
            "silver": Decimal("1000"),
            "gold": Decimal("2000"),
            "premium": Decimal("5000")
        },
        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏—è"
    )
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    MIN_TASK_REWARD: Decimal = Field(default=Decimal("50"), description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ")
    MIN_CHECK_AMOUNT: Decimal = Field(default=Decimal("10"), description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞")
    MAX_CHECK_AMOUNT: Decimal = Field(default=Decimal("100000"), description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–µ–∫–∞")
    
    # ==================== –ê–ù–¢–ò–§–†–û–î –ù–ê–°–¢–†–û–ô–ö–ò ====================
    
    # –õ–∏–º–∏—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤
    MAX_ACTIONS_PER_MINUTE: int = Field(default=30, description="–ú–∞–∫—Å–∏–º—É–º –¥–µ–π—Å—Ç–≤–∏–π –≤ –º–∏–Ω—É—Ç—É")
    MAX_TASKS_PER_HOUR: int = Field(default=10, description="–ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞–Ω–∏–π –≤ —á–∞—Å")
    SUSPICIOUS_ACTIVITY_THRESHOLD: int = Field(default=50, description="–ü–æ—Ä–æ–≥ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    # –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    SPAM_BLOCK_DURATION: int = Field(default=3600, description="–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Å–ø–∞–º (1 —á–∞—Å)")
    FRAUD_BLOCK_DURATION: int = Field(default=86400, description="–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞ —Ñ—Ä–æ–¥ (24 —á–∞—Å–∞)")
    
    # ==================== –°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í ====================
    
    # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–µ–∫–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    CHECK_EXPIRY_TIME: int = Field(default=2592000, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —á–µ–∫–∞ (30 –¥–Ω–µ–π)")
    MAX_CHECK_ACTIVATIONS: int = Field(default=1000, description="–ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π –º—É–ª—å—Ç–∏-—á–µ–∫–∞")
    
    # ==================== –ó–ê–î–ê–ù–ò–Ø ====================
    
    # –í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    TASK_EXECUTION_TIMEOUT: int = Field(default=1800, description="–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è (30 –º–∏–Ω)")
    MANUAL_REVIEW_TIMEOUT: int = Field(default=86400, description="–¢–∞–π–º–∞—É—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (24 —á–∞—Å–∞)")
    
    # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    SAME_TASK_COOLDOWN: int = Field(default=300, description="–ö—É–ª–¥–∞—É–Ω –º–µ–∂–¥—É –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ (5 –º–∏–Ω)")
    
    # ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    NOTIFICATION_RATE_LIMIT: int = Field(default=10, description="–õ–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É")
    BATCH_NOTIFICATION_SIZE: int = Field(default=100, description="–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    # ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================
    
    LOG_LEVEL: str = Field(default="INFO", description="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    LOG_FORMAT: str = Field(
        default="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        description="–§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤"
    )
    SLOW_QUERY_THRESHOLD: float = Field(default=0.5, description="–ü–æ—Ä–æ–≥ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—Å–µ–∫)")
    
    # ==================== –í–ù–ï–®–ù–ò–ï –°–ï–†–í–ò–°–´ ====================
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    SENTRY_DSN: str | None = Field(default=None, description="Sentry DSN –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    PROMETHEUS_PORT: int = Field(default=8000, description="–ü–æ—Ä—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫ Prometheus")
    METRICS_ENABLED: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç—å —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫")
    
    # ==================== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ====================
    
    # JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –±—É–¥–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
    SECRET_KEY: str = Field(description="–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–æ–≤")
    ALGORITHM: str = Field(default="HS256", description="–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏")
    ACCESS_TOKEN_EXPIRE_MINUTES: int = Field(default=30, description="–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞")
    
    # –ê–¥–º–∏–Ω—ã –±–æ—Ç–∞
    ADMIN_IDS: list[int] = Field(default=[], description="ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞")
    
    # ==================== –í–ê–õ–ò–î–ê–¢–û–†–´ ====================
    
    @field_validator("BOT_TOKEN")
    @classmethod
    def validate_bot_token(cls, v: str) -> str:
        if not v or not v.count(":") == 1:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        return v
    
    @field_validator("ADMIN_IDS", mode="before")
    @classmethod
    def parse_admin_ids(cls, v):
        if isinstance(v, str):
            return [int(x.strip()) for x in v.split(",") if x.strip()]
        return v
    
    # ==================== –í–´–ß–ò–°–õ–Ø–ï–ú–´–ï –ü–û–õ–Ø ====================
    
    @computed_field
    @property
    def is_production(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return self.ENVIRONMENT == "production"
    
    @computed_field
    @property
    def base_url(self) -> str:
        """–ë–∞–∑–æ–≤—ã–π URL –¥–ª—è webhook"""
        return self.WEBHOOK_URL.rstrip("/") if self.WEBHOOK_URL else ""
    
    # ==================== –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–´ –° –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ====================
    
    def get_stars_package(self, package_name: str) -> dict | None:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–∫–µ—Ç–∞ Stars"""
        return self.STARS_PACKAGES.get(package_name)
    
    def calculate_gram_from_stars(self, stars: int, package_name: str | None = None) -> tuple[Decimal, Decimal]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ GRAM –∏–∑ Stars
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–æ—Å–Ω–æ–≤–Ω–∞—è_—Å—É–º–º–∞, –±–æ–Ω—É—Å)
        """
        if package_name and package_name in self.STARS_PACKAGES:
            package = self.STARS_PACKAGES[package_name]
            if stars == package["stars"]:
                base_gram = Decimal(str(package["gram"]))
                bonus_gram = Decimal(str(package.get("bonus_gram", 0)))
                return base_gram, bonus_gram
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        base_gram = Decimal(str(stars * self.STARS_TO_GRAM_BASE_RATE))
        return base_gram, Decimal("0")
    
    def get_user_level_config(self, level: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return {
            "threshold": self.LEVEL_THRESHOLDS.get(level, Decimal("0")),
            "commission": self.LEVEL_COMMISSIONS.get(level, Decimal("0.07")),
            "referral_bonus": self.REFERRAL_BONUSES.get(level, Decimal("1000")),
            "daily_task_limit": self.DAILY_TASK_LIMITS.get(level, 5),
            "max_task_reward": self.MAX_TASK_REWARDS.get(level, Decimal("500")),
            "referral_rates": self.REFERRAL_COMMISSION_RATES.get(level, {
                "tasks": Decimal("0.05"),
                "deposits": Decimal("0.10")
            })
        }
    
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.ADMIN_IDS
    
    # ==================== JSON –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
    
    @staticmethod
    def json_dumps(obj) -> str:
        """–ö–∞—Å—Ç–æ–º–Ω–∞—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Decimal"""
        def decimal_serializer(o):
            if isinstance(o, Decimal):
                return float(o)
            raise TypeError(f"Object of type {type(o)} is not JSON serializable")
        
        return json.dumps(obj, default=decimal_serializer, ensure_ascii=False)
    
    @staticmethod
    def json_loads(s: str):
        """–ö–∞—Å—Ç–æ–º–Ω–∞—è JSON –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        return json.loads(s)

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

