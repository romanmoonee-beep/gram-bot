from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from app.database.models.check import Check, CheckType
from app.database.models.user import User
from app.bot.keyboards.main_menu import MainMenuCallback

class CheckCallback(CallbackData, prefix="check"):
    """Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–µ–∫–æ–≤"""
    action: str
    check_id: int = 0
    check_type: str = "none"
    page: int = 1

def get_checks_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–æ–≤
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å —á–µ–∫",
            callback_data=CheckCallback(action="create_menu").pack()
        )
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞–º–∏
    builder.row(
        InlineKeyboardButton(
            text="üìã –ú–æ–∏ —á–µ–∫–∏",
            callback_data=CheckCallback(action="my_checks").pack()
        ),
        InlineKeyboardButton(
            text="üí∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
            callback_data=CheckCallback(action="activated").pack()
        )
    )
    
    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞
    builder.row(
        InlineKeyboardButton(
            text="üé´ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫",
            callback_data=CheckCallback(action="activate").pack()
        )
    )
    
    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    builder.row(
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=MainMenuCallback(action="main_menu").pack()
        )
    )
    
    return builder.as_markup()

def get_check_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —á–µ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫",
            callback_data=CheckCallback(action="create", check_type="personal").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üë• –ú—É–ª—å—Ç–∏-—á–µ–∫",
            callback_data=CheckCallback(action="create", check_type="multi").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üéÅ –†–æ–∑—ã–≥—Ä—ã—à",
            callback_data=CheckCallback(action="create", check_type="giveaway").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=CheckCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

def get_my_checks_keyboard(
    checks: list[Check], 
    page: int = 1,
    has_next: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∏—Ö —á–µ–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ß–µ–∫–∏
    for check in checks:
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_icons = {
            "active": "üü¢",
            "expired": "‚è∞",
            "completed": "‚úÖ",
            "cancelled": "‚ùå"
        }
        
        status_icon = status_icons.get(check.status, "‚ùì")
        progress = f"{check.current_activations}/{check.max_activations}"
        
        button_text = f"{status_icon} #{check.check_code} | {progress}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=CheckCallback(action="manage", check_id=check.id).pack()
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=CheckCallback(action="my_checks", page=page-1).pack()
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=CheckCallback(action="my_checks", page=page+1).pack()
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π",
            callback_data=CheckCallback(action="create_menu").pack()
        ),
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=CheckCallback(action="my_checks", page=page).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —á–µ–∫–∏",
            callback_data=CheckCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

def get_check_management_keyboard(check: Check) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–æ–º"""
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º
    builder.row(
        InlineKeyboardButton(
            text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —á–µ–∫–æ–º",
            switch_inline_query=f"üí≥ –ß–µ–∫ –Ω–∞ {check.amount_per_activation:,.0f} GRAM! –ö–æ–¥: {check.check_code}"
        )
    )
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
    builder.row(
        InlineKeyboardButton(
            text="üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥",
            callback_data=CheckCallback(action="copy_code", check_id=check.id).pack()
        )
    )
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    builder.row(
        InlineKeyboardButton(
            text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            callback_data=CheckCallback(action="analytics", check_id=check.id).pack()
        )
    )
    
    # –û—Ç–º–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–∫–æ–≤)
    if check.status == "active":
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —á–µ–∫",
                callback_data=CheckCallback(action="cancel", check_id=check.id).pack()
            )
        )
    
    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –º–æ–∏–º —á–µ–∫–∞–º",
            callback_data=CheckCallback(action="my_checks").pack()
        )
    )
    
    return builder.as_markup()

def get_check_activation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —á–µ–∫–∏",
            callback_data=CheckCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

def get_activated_checks_keyboard(
    activations: list,
    page: int = 1,
    has_next: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤"""
    builder = InlineKeyboardBuilder()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=CheckCallback(action="activated", page=page-1).pack()
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=CheckCallback(action="activated", page=page+1).pack()
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=CheckCallback(action="activated", page=page).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ —á–µ–∫–∏",
            callback_data=CheckCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

def get_check_display_keyboard(check_code: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫",
            callback_data=f"activate_check_{check_code}"
        )
    )
    
    return builder.as_markup()

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        )
    )
    return builder.as_markup()
