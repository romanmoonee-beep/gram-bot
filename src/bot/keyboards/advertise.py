from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData

from app.database.models.task import Task, TaskType, TaskStatus
from app.database.models.user import User
from app.bot.keyboards.main_menu import MainMenuCallback

class AdvertiseCallback(CallbackData, prefix="adv"):
    """Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã"""
    action: str
    task_type: str = "none"
    task_id: int = 0
    page: int = 1

def get_advertise_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∫–ª–∞–º—ã"""
    builder = InlineKeyboardBuilder()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
    builder.row(
        InlineKeyboardButton(
            text="üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
            callback_data=AdvertiseCallback(action="create", task_type="channel_subscription").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
            callback_data=AdvertiseCallback(action="create", task_type="group_join").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞",
            callback_data=AdvertiseCallback(action="create", task_type="post_view").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç",
            callback_data=AdvertiseCallback(action="create", task_type="post_reaction").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞",
            callback_data=AdvertiseCallback(action="create", task_type="bot_interaction").pack()
        )
    )
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
    builder.row(
        InlineKeyboardButton(
            text="üéØ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è",
            callback_data=AdvertiseCallback(action="my_tasks").pack()
        )
    )
    
    # –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
    builder.row(
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=MainMenuCallback(action="main_menu").pack()
        )
    )
    
    return builder.as_markup()

def get_my_tasks_keyboard(
    tasks: list[Task], 
    page: int = 1,
    has_next: bool = False
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–æ–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–¥–∞–Ω–∏—è
    for task in tasks:
        # –ò–∫–æ–Ω–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_icons = {
            TaskStatus.ACTIVE: "üü¢",
            TaskStatus.PAUSED: "‚è∏Ô∏è",
            TaskStatus.COMPLETED: "‚úÖ",
            TaskStatus.CANCELLED: "‚ùå",
            TaskStatus.EXPIRED: "‚è∞"
        }
        
        status_icon = status_icons.get(task.status, "‚ùì")
        progress = f"{task.completed_executions}/{task.target_executions}"
        
        button_text = f"{status_icon} {task.title[:20]}... | {progress}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=AdvertiseCallback(action="manage", task_id=task.id).pack()
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdvertiseCallback(action="my_tasks", page=page-1).pack()
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", 
                callback_data=AdvertiseCallback(action="my_tasks", page=page+1).pack()
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ",
            callback_data=AdvertiseCallback(action="menu").pack()
        ),
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data=AdvertiseCallback(action="my_tasks", page=page).pack()
        )
    )
    
    return builder.as_markup()

def get_task_management_keyboard(task: Task) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if task.status == TaskStatus.ACTIVE:
        builder.row(
            InlineKeyboardButton(
                text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                callback_data=AdvertiseCallback(action="pause", task_id=task.id).pack()
            )
        )
    elif task.status == TaskStatus.PAUSED:
        builder.row(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å",
                callback_data=AdvertiseCallback(action="resume", task_id=task.id).pack()
            )
        )
    
    # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    builder.row(
        InlineKeyboardButton(
            text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            callback_data=AdvertiseCallback(action="analytics", task_id=task.id).pack()
        )
    )
    
    # –û—Ç–º–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π)
    if task.status not in [TaskStatus.COMPLETED, TaskStatus.CANCELLED]:
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
                callback_data=AdvertiseCallback(action="cancel", task_id=task.id).pack()
            )
        )
    
    # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö –º–æ–∏–º –∑–∞–¥–∞–Ω–∏—è–º",
            callback_data=AdvertiseCallback(action="my_tasks").pack()
        )
    )
    
    return builder.as_markup()

def get_task_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    task_types = [
        ("üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª", "channel_subscription"),
        ("üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É", "group_join"), 
        ("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞", "post_view"),
        ("üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç", "post_reaction"),
        ("ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞", "bot_interaction")
    ]
    
    for text, task_type in task_types:
        builder.row(
            InlineKeyboardButton(
                text=text,
                callback_data=AdvertiseCallback(action="create", task_type=task_type).pack()
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=AdvertiseCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()