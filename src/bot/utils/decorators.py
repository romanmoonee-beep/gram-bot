"""–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

import functools
import time
from typing import Callable, Any, Dict

import structlog
from aiogram.types import Message, CallbackQuery

logger = structlog.get_logger(__name__)

def rate_limit(rate: int = 1):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –≤—ã–∑–æ–≤–æ–≤
    
    Args:
        rate: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
    """
    def decorator(func: Callable) -> Callable:
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤
        last_call_times: Dict[int, float] = {}
        
        @functools.wraps(func)
        async def wrapper(update: Message | CallbackQuery, *args, **kwargs):
            user_id = update.from_user.id
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
            if user_id in last_call_times:
                time_passed = current_time - last_call_times[user_id]
                if time_passed < rate:
                    # –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
                    if isinstance(update, CallbackQuery):
                        await update.answer("‚è∞ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!", show_alert=True)
                    else:
                        await update.answer("‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º")
                    return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
            last_call_times[user_id] = current_time
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            return await func(update, *args, **kwargs)
        
        return wrapper
    return decorator

def admin_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    
    @functools.wraps(func)
    async def wrapper(update: Message | CallbackQuery, *args, **kwargs):
        from app.config.settings import settings
        
        user_id = update.from_user.id
        
        if user_id not in settings.ADMIN_IDS:
            if isinstance(update, CallbackQuery):
                await update.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            else:
                await update.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
            return
        
        return await func(update, *args, **kwargs)
    
    return wrapper

def log_action(action_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        async def wrapper(update: Message | CallbackQuery, *args, **kwargs):
            user_id = update.from_user.id
            username = update.from_user.username
            
            logger.info(
                "User action",
                action=action_name,
                user_id=user_id,
                username=username
            )
            
            try:
                result = await func(update, *args, **kwargs)
                
                logger.info(
                    "Action completed",
                    action=action_name,
                    user_id=user_id,
                    status="success"
                )
                
                return result
                
            except Exception as e:
                logger.error(
                    "Action failed",
                    action=action_name,
                    user_id=user_id,
                    error=str(e),
                    exc_info=True
                )
                raise
        
        return wrapper
    return decorator

def error_handler(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @functools.wraps(func)
    async def wrapper(update: Message | CallbackQuery, *args, **kwargs):
        try:
            return await func(update, *args, **kwargs)
        except Exception as e:
            logger.error(
                "Handler error",
                handler=func.__name__,
                user_id=update.from_user.id,
                error=str(e),
                exc_info=True
            )
            
            error_message = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            
            if isinstance(update, CallbackQuery):
                await update.answer(error_message, show_alert=True)
            else:
                await update.answer(error_message)
    
    return wrapper