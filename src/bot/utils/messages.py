from __future__ import annotations

from datetime import datetime, timedelta
from decimal import Decimal

from app.database.models.user import User
from app.database.models.task import Task, TaskType
from app.database.models.task_execution import TaskExecution
from app.config.settings import settings

# ==============================================================================
# –û–°–ù–û–í–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
# ==============================================================================

WELCOME_MESSAGE = """üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PR GRAM Bot!</b>

–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ GRAM –∑–∞ –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–æ—Å—Ç–æ–≤
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥—ã

üí∞ –¢—Ä–∞—Ç—å—Ç–µ GRAM –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

üéÅ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!"""

HELP_MESSAGE = """‚ùì <b>–ü–û–ú–û–©–¨</b>

<b>–ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å GRAM:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!

<b>–ö–∞–∫ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å" 
2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏–µ
3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
4Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!

<b>Telegram Stars:</b>
–ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–ª–∞—Ç–µ–∂–µ–π Telegram

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @prgram_support
<b>–ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π:</b> @prgram_news"""

# ==============================================================================
# –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ê–•
# ==============================================================================

ERROR_MESSAGES = {
    "insufficient_balance": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
    "task_not_found": "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
    "task_already_completed": "‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ",
    "task_expired": "‚ùå –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫",
    "task_not_active": "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ",
    "invalid_url": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞",
    "rate_limit": "‚è∞ –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ",
    "maintenance": "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
    "access_denied": "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
    "user_banned": "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
    "level_insufficient": "‚ùå –í–∞—à —É—Ä–æ–≤–µ–Ω—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è",
    "daily_limit_exceeded": "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç",
    "invalid_data": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
    "operation_failed": "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
}

# ==============================================================================
# –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –£–°–ü–ï–•–ï
# ==============================================================================

SUCCESS_MESSAGES = {
    "task_completed": "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! +{reward} GRAM",
    "task_created": "‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!",
    "payment_success": "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!",
    "referral_bonus": "üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! +{bonus} GRAM",
    "balance_updated": "üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
    "settings_saved": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
    "operation_success": "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
}

# ==============================================================================
# –§–£–ù–ö–¶–ò–ò –ì–ï–ù–ï–†–ê–¶–ò–ò –°–û–û–ë–©–ï–ù–ò–ô
# ==============================================================================

def get_welcome_text(user: User) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    level_config = user.get_level_config()
    
    return f"""{WELCOME_MESSAGE}

üíé <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> {level_config['name']}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance:,.0f} GRAM

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /earn –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –Ω–∏–∂–µ! üëá"""

def get_main_menu_text(user: User) -> str:
    """–¢–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    level_config = user.get_level_config()
    
    return f"""üè† <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>

–ë–∞–ª–∞–Ω—Å: <b>{user.balance:,.0f} GRAM</b> üí∞
–£—Ä–æ–≤–µ–Ω—å: <b>{level_config['name']}</b> {level_config['emoji']}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""

def get_profile_text(user: User) -> str:
    """–¢–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    level_config = user.get_level_config()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    current_threshold = level_config.get('min_balance', Decimal('0'))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    next_level_info = ""
    if user.level == "bronze":
        next_threshold = settings.LEVEL_THRESHOLDS["silver"]
        next_level_info = f"–î–æ Silver: {next_threshold - user.balance:,.0f} GRAM"
    elif user.level == "silver":
        next_threshold = settings.LEVEL_THRESHOLDS["gold"]
        next_level_info = f"–î–æ Gold: {next_threshold - user.balance:,.0f} GRAM"
    elif user.level == "gold":
        next_threshold = settings.LEVEL_THRESHOLDS["premium"]
        next_level_info = f"–î–æ Premium: {next_threshold - user.balance:,.0f} GRAM"
    else:
        next_level_info = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å!"
    
    registration_date = user.created_at.strftime('%d.%m.%Y')
    account_age = (datetime.utcnow() - user.created_at).days
    
    return f"""üë§ <b>–ú–û–ô –ö–ê–ë–ò–ù–ï–¢</b>

üÜî ID: <code>{user.telegram_id}</code>
üë®‚Äçüíº @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìä –£—Ä–æ–≤–µ–Ω—å: <b>{level_config['name']}</b>

üí∞ <b>–ë–ê–õ–ê–ù–°:</b>
‚îú –î–æ—Å—Ç—É–ø–Ω–æ: <b>{user.available_balance:,.0f} GRAM</b>
‚îú –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {user.frozen_balance:,.0f} GRAM
‚îî {next_level_info}

üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.tasks_completed}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.tasks_created}  
‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.total_referrals} ({user.premium_referrals} Premium)
‚îî –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: {user.total_earned:,.0f} GRAM

üìÖ <b>–ê–ö–ö–ê–£–ù–¢:</b>
‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration_date}
‚îú –í–æ–∑—Ä–∞—Å—Ç: {account_age} –¥–Ω.
‚îî –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_activity.strftime('%d.%m %H:%M') if user.last_activity else '–¥–∞–≤–Ω–æ'}"""

def get_balance_details_text(user: User) -> str:
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ"""
    level_config = user.get_level_config()
    
    return f"""üí∞ <b>–ü–û–î–†–û–ë–ù–û –û –ë–ê–õ–ê–ù–°–ï</b>

üí≥ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>
‚îú –û–±—â–∏–π: {user.balance:,.0f} GRAM
‚îú –î–æ—Å—Ç—É–ø–Ω–æ: <b>{user.available_balance:,.0f} GRAM</b>
‚îî –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {user.frozen_balance:,.0f} GRAM

üìä <b>–î–í–ò–ñ–ï–ù–ò–Ø –°–†–ï–î–°–¢–í:</b>
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned:,.0f} GRAM
‚îú –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent:,.0f} GRAM
‚îú –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {user.total_deposited:,.0f} GRAM
‚îî –û—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.referral_earnings:,.0f} GRAM

‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –£–†–û–í–ù–Ø:</b>
‚îú –ö–æ–º–∏—Å—Å–∏—è —Å –∑–∞–¥–∞–Ω–∏–π: {level_config['commission_rate']*100:.0f}%
‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥: x{level_config['task_multiplier']}
‚îú –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {level_config['referral_bonus']:,.0f} GRAM
‚îî –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π: {level_config['max_daily_tasks'] if level_config['max_daily_tasks'] != -1 else '‚àû'}

üí° <i>–ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏–π!</i>"""

def get_task_text(task: Task, user: User | None = None) -> str:
    """–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è"""
    # –ò–∫–æ–Ω–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    type_icons = {
        TaskType.CHANNEL_SUBSCRIPTION: "üì∫",
        TaskType.GROUP_JOIN: "üë•",
        TaskType.POST_VIEW: "üëÄ",
        TaskType.POST_REACTION: "üëç",
        TaskType.BOT_INTERACTION: "ü§ñ",
        TaskType.CUSTOM: "‚öôÔ∏è"
    }
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    type_names = {
        TaskType.CHANNEL_SUBSCRIPTION: "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
        TaskType.GROUP_JOIN: "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
        TaskType.POST_VIEW: "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞",
        TaskType.POST_REACTION: "–†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç",
        TaskType.BOT_INTERACTION: "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º",
        TaskType.CUSTOM: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
    }
    
    icon = type_icons.get(task.type, "üéØ")
    type_name = type_names.get(task.type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final_reward = task.reward_amount
    if user:
        user_config = user.get_level_config()
        final_reward = task.reward_amount * user_config['task_multiplier']
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
    time_info = ""
    if task.expires_at:
        remaining = task.expires_at - datetime.utcnow()
        if remaining.total_seconds() > 0:
            hours = int(remaining.total_seconds() // 3600)
            minutes = int((remaining.total_seconds() % 3600) // 60)
            time_info = f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º"
        else:
            time_info = "‚è∞ –ó–∞–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ"
    
    # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
    requirements = []
    if task.min_user_level:
        level_names = {
            "bronze": "ü•â Bronze",
            "silver": "ü•à Silver", 
            "gold": "ü•á Gold",
            "premium": "üíé Premium"
        }
        req_level = level_names.get(task.min_user_level, task.min_user_level)
        requirements.append(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {req_level}")
    
    requirements_text = ""
    if requirements:
        requirements_text = "\n\nüìã <b>–¢–†–ï–ë–û–í–ê–ù–ò–Ø:</b>\n" + "\n".join(f"‚Ä¢ {req}" for req in requirements)
    
    return f"""{icon} <b>{task.title}</b>

üìù <b>–¢–∏–ø:</b> {type_name}
üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {final_reward:,.0f} GRAM
üë• <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {task.completed_executions}/{task.target_executions}
{time_info}

üìÑ <b>–û–ü–ò–°–ê–ù–ò–ï:</b>
{task.description}

üîó <b>–°—Å—ã–ª–∫–∞:</b> {task.target_url}{requirements_text}"""

def get_task_list_text(tasks: list[Task], task_type: str = "all", page: int = 1) -> str:
    """–¢–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π"""
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    type_titles = {
        "all": "üéØ –í–°–ï –ó–ê–î–ê–ù–ò–Ø",
        "channel_subscription": "üì∫ –ü–û–î–ü–ò–°–ö–ê –ù–ê –ö–ê–ù–ê–õ–´",
        "group_join": "üë• –í–°–¢–£–ü–õ–ï–ù–ò–ï –í –ì–†–£–ü–ü–´",
        "post_view": "üëÄ –ü–†–û–°–ú–û–¢–† –ü–û–°–¢–û–í",
        "post_reaction": "üëç –†–ï–ê–ö–¶–ò–ò –ù–ê –ü–û–°–¢–´",
        "bot_interaction": "ü§ñ –ü–ï–†–ï–•–û–î –í –ë–û–¢–û–í"
    }
    
    title = type_titles.get(task_type, "üéØ –ó–ê–î–ê–ù–ò–Ø")
    
    if not tasks:
        return f"""{title}

‚ùå <b>–ó–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ"""
    
    total_reward = sum(task.reward_amount for task in tasks)
    
    return f"""{title}

üìä –ù–∞–π–¥–µ–Ω–æ: <b>{len(tasks)} –∑–∞–¥–∞–Ω–∏–π</b>
üí∞ –û–±—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞: <b>{total_reward:,.0f} GRAM</b>
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"""

def get_task_execution_text(task: Task, user: User) -> str:
    """–¢–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    user_config = user.get_level_config()
    final_reward = task.reward_amount * user_config['task_multiplier']
    
    instructions = {
        TaskType.CHANNEL_SUBSCRIPTION: """üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"

‚ö†Ô∏è <i>–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>""",
        
        TaskType.GROUP_JOIN: """üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üë• –í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É"
2. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"

‚ö†Ô∏è <i>–ù–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>""",
        
        TaskType.BOT_INTERACTION: """üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É"
2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è
3. –°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
4. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

‚è∞ <i>–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤</i>""",
        
        TaskType.POST_VIEW: """üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç"
2. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ/–ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å—Ç
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"

‚ö†Ô∏è <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏–ª—Å—è!</i>""",
        
        TaskType.POST_REACTION: """üí° <b>–ò–ù–°–¢–†–£–ö–¶–ò–Ø:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üëç –ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é"
2. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –ø–æ—Å—Ç
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å"

‚ö†Ô∏è <i>–ù–µ —É–±–∏—Ä–∞–π—Ç–µ —Ä–µ–∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏!</i>"""
    }
    
    instruction = instructions.get(task.type, "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∑–∞–¥–∞–Ω–∏—è")
    
    return f"""üéØ <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

üìã <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task.title}
üí∞ <b>–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞:</b> {final_reward:,.0f} GRAM
‚è±Ô∏è <b>–í—Ä–µ–º—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</b> {settings.TASK_EXECUTION_TIMEOUT // 60} –º–∏–Ω—É—Ç

{instruction}"""

def get_referral_text(user: User) -> str:
    """–¢–µ–∫—Å—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    level_config = user.get_level_config()
    referral_link = f"https://t.me/{settings.BOT_USERNAME}?start={user.telegram_id}"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    avg_referral_income = 0
    if user.total_referrals > 0:
        avg_referral_income = user.referral_earnings / user.total_referrals
    
    return f"""üîó <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>

üí∞ <b>–í–ê–®–ò –î–û–•–û–î–´:</b>
‚îú –ó–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {level_config['referral_bonus']:,.0f} GRAM –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
‚îú –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 5% –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚îú –ó–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚îî –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.referral_earnings:,.0f} GRAM

üë• <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.total_referrals}
‚îú Premium —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.premium_referrals}
‚îú –°—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {avg_referral_income:,.0f} GRAM
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ Premium: {(user.premium_referrals/user.total_referrals*100 if user.total_referrals > 0 else 0):.1f}%

üîó <b>–í–ê–®–ê –°–°–´–õ–ö–ê:</b>
<code>{referral_link}</code>

üí° <i>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ –∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!</i>"""

def get_deposit_text(package_name: str) -> str:
    """–¢–µ–∫—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    package = settings.get_stars_package(package_name)
    if not package:
        return "‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    base_gram, bonus_gram = settings.calculate_gram_from_stars(package["stars"], package_name)
    total_gram = base_gram + bonus_gram
    
    bonus_text = ""
    if bonus_gram > 0:
        bonus_text = f"\nüéÅ <b>–ë–æ–Ω—É—Å:</b> +{bonus_gram:,.0f} GRAM"
    
    if package.get("bonus_percent", 0) > 0:
        bonus_text += f"\nüí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> {package['bonus_percent']}%"
    
    return f"""üí≥ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package['title']}
‚≠ê <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package['stars']} Telegram Stars
üí∞ <b>–ü–æ–ª—É—á–∏—Ç–µ:</b> {total_gram:,.0f} GRAM{bonus_text}

üì± <b>–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É Stars –≤ Telegram
3. GRAM –ø–æ—Å—Ç—É–ø—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚ö° <i>–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</i>"""

def get_my_tasks_text(tasks: list[Task], page: int = 1) -> str:
    """–¢–µ–∫—Å—Ç –º–æ–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    if not tasks:
        return """üéØ <b>–ú–û–ò –ó–ê–î–ê–ù–ò–Ø</b>

üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π</b>

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"""
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    active_count = sum(1 for task in tasks if task.status.value == "active")
    completed_count = sum(1 for task in tasks if task.status.value == "completed")
    total_spent = sum(task.spent_budget for task in tasks)
    total_executions = sum(task.completed_executions for task in tasks)
    
    return f"""üéØ <b>–ú–û–ò –ó–ê–î–ê–ù–ò–Ø</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_count}
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {total_spent:,.0f} GRAM
‚îî –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {total_executions}

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""

def get_task_analytics_text(analytics: dict) -> str:
    """–¢–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏—è"""
    task = analytics['task']
    
    return f"""üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê–î–ê–ù–ò–Ø</b>

üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task.title}
üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.completed_executions}/{task.target_executions}
‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: {task.completion_percentage:.1f}%
‚îú –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {analytics['completion_rate']:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {task.remaining_executions}

üí∞ <b>–ë–Æ–î–ñ–ï–¢:</b>
‚îú –û–±—â–∏–π: {analytics['budget_utilization']['total']:,.0f} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {analytics['budget_utilization']['spent']:,.0f} GRAM
‚îú –û—Å—Ç–∞–µ—Ç—Å—è: {analytics['budget_utilization']['remaining']:,.0f} GRAM
‚îî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {analytics['budget_utilization']['utilization_percent']:.1f}%

‚è±Ô∏è <b>–í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø:</b>
‚îú –°—Ä–µ–¥–Ω–µ–µ: {analytics['timing']['average_seconds']:.0f} —Å–µ–∫
‚îú –ë—ã—Å—Ç—Ä–µ–π—à–µ–µ: {analytics['timing']['fastest_seconds']:.0f} —Å–µ–∫
‚îî –°–∞–º–æ–µ –¥–æ–ª–≥–æ–µ: {analytics['timing']['slowest_seconds']:.0f} —Å–µ–∫

üìã <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–ô:</b>"""

def format_task_execution_stats(executions_by_status: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"""
    status_names = {
        "pending": "‚è≥ –û–∂–∏–¥–∞—é—Ç",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã",
        "expired": "‚è∞ –ò—Å—Ç–µ–∫—à–∏–µ"
    }
    
    lines = []
    for status, count in executions_by_status.items():
        name = status_names.get(status, status)
        lines.append(f"‚îú {name}: {count}")
    
    return "\n".join(lines)

def get_admin_stats_text(stats: dict) -> str:
    """–¢–µ–∫—Å—Ç –∞–¥–º–∏–Ω—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return f"""üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>

üéØ <b>–ó–ê–î–ê–ù–ò–Ø:</b>
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['tasks']['by_status'].get('active', {}).get('count', 0)}
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['tasks']['by_status'].get('completed', {}).get('count', 0)}
‚îú –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö: {stats['tasks']['by_status'].get('paused', {}).get('count', 0)}
‚îî –û–±—â–∏–π –±—é–¥–∂–µ—Ç: {stats['tasks']['total_budget']:,.0f} GRAM

üíº <b>–í–´–ü–û–õ–ù–ï–ù–ò–Ø:</b>
‚îú –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {stats['executions']['by_status'].get('pending', {}).get('count', 0)}
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {stats['executions']['by_status'].get('completed', {}).get('count', 0)}
‚îú –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {stats['executions']['by_status'].get('rejected', {}).get('count', 0)}
‚îî –û–±—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã: {stats['executions']['total_rewards']:,.0f} GRAM

üìà <b>–ó–ê 24 –ß–ê–°–ê:</b>
‚îú –ù–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {stats['recent_24h']['new_tasks']}
‚îî –ù–æ–≤—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {stats['recent_24h']['new_executions']}

‚ö° <i>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</i>"""

def get_error_message(error_key: str, **kwargs) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    message = ERROR_MESSAGES.get(error_key, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    try:
        return message.format(**kwargs)
    except (KeyError, ValueError):
        return message

def get_success_message(success_key: str, **kwargs) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    message = SUCCESS_MESSAGES.get(success_key, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    try:
        return message.format(**kwargs)
    except (KeyError, ValueError):
        return message

# ==============================================================================
# –£–¢–ò–õ–ò–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø
# ==============================================================================

def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    now = datetime.utcnow()
    diff = now - dt
    
    if diff.days > 0:
        return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 3600:
        hours = diff.seconds // 3600
        return f"{hours} —á. –Ω–∞–∑–∞–¥"
    elif diff.seconds > 60:
        minutes = diff.seconds // 60
        return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
    else:
        return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"

def format_duration(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    else:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"

def format_gram_amount(amount: Decimal | float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã GRAM"""
    if isinstance(amount, Decimal):
        amount = float(amount)
    
    if amount >= 1000000:
        return f"{amount/1000000:.1f}M GRAM"
    elif amount >= 1000:
        return f"{amount/1000:.1f}K GRAM"
    else:
        return f"{amount:,.0f} GRAM"

def format_percentage(value: float, total: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"""
    if total == 0:
        return "0%"
    
    percentage = (value / total) * 100
    return f"{percentage:.1f}%"

def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    return (text
            .replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&#x27;"))

def format_user_mention(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    display_name = user.first_name or user.username or str(user.telegram_id)
    return f'<a href="tg://user?id={user.telegram_id}">{escape_html(display_name)}</a>'

def get_level_emoji(level: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω—è"""
    emojis = {
        "bronze": "ü•â",
        "silver": "ü•à", 
        "gold": "ü•á",
        "premium": "üíé"
    }
    return emojis.get(level, "‚ùì")

def get_task_type_emoji(task_type: TaskType) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
    emojis = {
        TaskType.CHANNEL_SUBSCRIPTION: "üì∫",
        TaskType.GROUP_JOIN: "üë•",
        TaskType.POST_VIEW: "üëÄ",
        TaskType.POST_REACTION: "üëç",
        TaskType.BOT_INTERACTION: "ü§ñ",
        TaskType.CUSTOM: "‚öôÔ∏è"
    }
    return emojis.get(task_type, "üéØ")

def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
    emojis = {
        "active": "üü¢",
        "paused": "‚è∏Ô∏è",
        "completed": "‚úÖ",
        "cancelled": "‚ùå",
        "expired": "‚è∞",
        "pending": "‚è≥",
        "rejected": "‚ùå"
    }
    return emojis.get(status, "‚ùì")

# ==============================================================================
# –í–ê–õ–ò–î–ê–¶–ò–Ø –ò –ü–†–û–í–ï–†–ö–ò
# ==============================================================================

def validate_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ URL"""
    import re
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Telegram —Å—Å—ã–ª–æ–∫
    patterns = [
        r'^https://t\.me/[a-zA-Z0-9_]+/?,  # –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞
        r'^https://t\.me/[a-zA-Z0-9_]+/\d+/?,  # –ü–æ—Å—Ç
        r'^@[a-zA-Z0-9_]+,  # Username
        r'^https://t\.me/\+[a-zA-Z0-9_-]+/?  # –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
    ]
    
    return any(re.match(pattern, url) for pattern in patterns)

def validate_task_title(title: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    if not title or not title.strip():
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if len(title) > 255:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 255 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    if len(title) < 5:
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    forbidden_words = ["—Å–ø–∞–º", "—Ä–∞–∑–≤–æ–¥", "–º–æ—à–µ–Ω–Ω–∏–∫", "fake"]
    if any(word in title.lower() for word in forbidden_words):
        return False, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
    
    return True, ""

def validate_reward_amount(amount: Decimal, user_level: str) -> tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥—ã"""
    if amount < settings.MIN_TASK_REWARD:
        return False, f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {settings.MIN_TASK_REWARD} GRAM"
    
    max_reward = settings.MAX_TASK_REWARDS.get(user_level, Decimal("500"))
    if amount > max_reward:
        return False, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è: {max_reward} GRAM"
    
    return True, ""

def can_user_create_task(user: User) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not user.is_active:
        return False, "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    
    if user.is_banned:
        return False, f"–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {user.ban_reason}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    config = user.get_level_config()
    daily_limit = config['max_daily_tasks']
    
    if daily_limit != -1:  # –ù–µ –±–µ–∑–ª–∏–º–∏—Ç
        today = datetime.utcnow().date()
        if user.last_task_date and user.last_task_date.date() == today:
            if user.daily_tasks_created >= daily_limit:
                return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit} –∑–∞–¥–∞–Ω–∏–π"
    
    return True, ""