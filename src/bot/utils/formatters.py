"""–§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ"""

from datetime import datetime, timedelta
from decimal import Decimal
from typing import Union, List, Optional

from app.database.models.user import User
from app.database.models.task import Task, TaskType, TaskStatus
from app.database.models.task_execution import TaskExecution, ExecutionStatus

class NumberFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —á–∏—Å–µ–ª –∏ –≤–∞–ª—é—Ç"""
    
    @staticmethod
    def format_gram(amount: Union[Decimal, float, int]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã GRAM —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏"""
        if isinstance(amount, Decimal):
            amount = float(amount)
        
        if amount >= 1_000_000:
            return f"{amount/1_000_000:.1f}M GRAM"
        elif amount >= 1_000:
            return f"{amount/1_000:.1f}K GRAM"
        else:
            return f"{amount:,.0f} GRAM"
    
    @staticmethod
    def format_gram_detailed(amount: Union[Decimal, float, int]) -> str:
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GRAM —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏"""
        if isinstance(amount, Decimal):
            amount = float(amount)
        
        return f"{amount:,.0f} GRAM"
    
    @staticmethod
    def format_number(number: Union[int, float]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª —Å —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏"""
        if number >= 1_000_000:
            return f"{number/1_000_000:.1f}M"
        elif number >= 1_000:
            return f"{number/1_000:.1f}K"
        else:
            return f"{number:,.0f}"
    
    @staticmethod
    def format_percentage(value: float, total: float, decimals: int = 1) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        if total == 0:
            return "0%"
        
        percentage = (value / total) * 100
        return f"{percentage:.{decimals}f}%"
    
    @staticmethod
    def format_commission(rate: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏"""
        return f"{rate * 100:.1f}%"

class TimeFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç"""
    
    @staticmethod
    def format_duration(seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        if seconds < 60:
            return f"{seconds} —Å–µ–∫"
        elif seconds < 3600:
            minutes = seconds // 60
            remaining_seconds = seconds % 60
            if remaining_seconds > 0:
                return f"{minutes}–º {remaining_seconds}—Å"
            return f"{minutes}–º"
        elif seconds < 86400:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            return f"{hours}—á"
        else:
            days = seconds // 86400
            hours = (seconds % 86400) // 3600
            if hours > 0:
                return f"{days}–¥ {hours}—á"
            return f"{days}–¥"
    
    @staticmethod
    def format_relative_time(dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ)"""
        now = datetime.utcnow()
        diff = now - dt
        
        if diff.days > 0:
            if diff.days == 1:
                return "–≤—á–µ—Ä–∞"
            elif diff.days < 7:
                return f"{diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
            elif diff.days < 30:
                weeks = diff.days // 7
                return f"{weeks} –Ω–µ–¥. –Ω–∞–∑–∞–¥"
            elif diff.days < 365:
                months = diff.days // 30
                return f"{months} –º–µ—Å. –Ω–∞–∑–∞–¥"
            else:
                years = diff.days // 365
                return f"{years} –≥. –Ω–∞–∑–∞–¥"
        
        elif diff.seconds > 3600:
            hours = diff.seconds // 3600
            return f"{hours} —á. –Ω–∞–∑–∞–¥"
        elif diff.seconds > 60:
            minutes = diff.seconds // 60
            return f"{minutes} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
    
    @staticmethod
    def format_time_remaining(end_time: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–∞—Ç—ã"""
        now = datetime.utcnow()
        remaining = end_time - now
        
        if remaining.total_seconds() <= 0:
            return "–∏—Å—Ç–µ–∫–ª–æ"
        
        days = remaining.days
        hours = remaining.seconds // 3600
        minutes = (remaining.seconds % 3600) // 60
        
        if days > 0:
            if hours > 0:
                return f"{days}–¥ {hours}—á"
            return f"{days}–¥"
        elif hours > 0:
            if minutes > 0:
                return f"{hours}—á {minutes}–º"
            return f"{hours}—á"
        else:
            return f"{minutes}–º"
    
    @staticmethod
    def format_datetime(dt: datetime, show_time: bool = True) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        if show_time:
            return dt.strftime('%d.%m.%Y %H:%M')
        else:
            return dt.strftime('%d.%m.%Y')
    
    @staticmethod
    def format_time_only(dt: datetime) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏"""
        return dt.strftime('%H:%M')

class TextFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Ç—Ä–æ–∫"""
    
    @staticmethod
    def truncate(text: str, max_length: int = 50, suffix: str = "...") -> str:
        """–û–±—Ä–µ–∑–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å—É—Ñ—Ñ–∏–∫—Å–∞"""
        if not text:
            return ""
        
        if len(text) <= max_length:
            return text
        
        return text[:max_length - len(suffix)] + suffix
    
    @staticmethod
    def escape_html(text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not text:
            return ""
        
        return (text
                .replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace('"', "&quot;")
                .replace("'", "&#x27;"))
    
    @staticmethod
    def format_list(items: List[str], max_items: int = 5, separator: str = ", ") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not items:
            return "–ø—É—Å—Ç–æ"
        
        if len(items) <= max_items:
            return separator.join(items)
        
        visible_items = items[:max_items]
        remaining = len(items) - max_items
        
        return f"{separator.join(visible_items)} –∏ –µ—â–µ {remaining}"
    
    @staticmethod
    def format_username(username: Optional[str], telegram_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if username:
            return f"@{username}"
        else:
            return f"ID{telegram_id}"
    
    @staticmethod
    def format_multiline_list(items: List[str], prefix: str = "‚îú", last_prefix: str = "‚îî") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏"""
        if not items:
            return ""
        
        formatted_items = []
        for i, item in enumerate(items):
            if i == len(items) - 1:
                formatted_items.append(f"{last_prefix} {item}")
            else:
                formatted_items.append(f"{prefix} {item}")
        
        return "\n".join(formatted_items)

class StatusFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    @staticmethod
    def format_user_level(level: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏"""
        level_formats = {
            "bronze": "ü•â Bronze",
            "silver": "ü•à Silver", 
            "gold": "ü•á Gold",
            "premium": "üíé Premium"
        }
        return level_formats.get(level, f"‚ùì {level}")
    
    @staticmethod
    def format_task_type(task_type: TaskType) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
        type_formats = {
            TaskType.CHANNEL_SUBSCRIPTION: "üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
            TaskType.GROUP_JOIN: "üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
            TaskType.POST_VIEW: "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞",
            TaskType.POST_REACTION: "üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç",
            TaskType.BOT_INTERACTION: "ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º",
            TaskType.CUSTOM: "‚öôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ"
        }
        return type_formats.get(task_type, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    @staticmethod
    def format_task_status(status: TaskStatus) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è"""
        status_formats = {
            TaskStatus.DRAFT: "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
            TaskStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–Ω–æ–µ",
            TaskStatus.PAUSED: "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
            TaskStatus.COMPLETED: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
            TaskStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
            TaskStatus.EXPIRED: "‚è∞ –ò—Å—Ç–µ–∫–ª–æ"
        }
        return status_formats.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    @staticmethod
    def format_execution_status(status: ExecutionStatus) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        status_formats = {
            ExecutionStatus.PENDING: "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏",
            ExecutionStatus.IN_PROGRESS: "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            ExecutionStatus.COMPLETED: "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            ExecutionStatus.REJECTED: "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            ExecutionStatus.EXPIRED: "‚è∞ –ò—Å—Ç–µ–∫–ª–æ",
            ExecutionStatus.CANCELLED: "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ"
        }
        return status_formats.get(status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    @staticmethod
    def get_level_emoji(level: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω—è"""
        emojis = {
            "bronze": "ü•â",
            "silver": "ü•à", 
            "gold": "ü•á",
            "premium": "üíé"
        }
        return emojis.get(level, "‚ùì")
    
    @staticmethod
    def get_status_emoji(status: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        emojis = {
            "active": "üü¢",
            "paused": "‚è∏Ô∏è",
            "completed": "‚úÖ",
            "cancelled": "‚ùå",
            "expired": "‚è∞",
            "pending": "‚è≥",
            "rejected": "‚ùå",
            "draft": "üìù"
        }
        return emojis.get(status.lower(), "‚ùì")

class ProgressFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    @staticmethod
    def format_progress_bar(current: int, total: int, length: int = 10) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        if total == 0:
            return "‚ñë" * length
        
        filled = int((current / total) * length)
        return "‚ñà" * filled + "‚ñë" * (length - filled)
    
    @staticmethod
    def format_completion_stats(completed: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        percentage = (completed / total * 100) if total > 0 else 0
        return f"{completed}/{total} ({percentage:.1f}%)"
    
    @staticmethod
    def format_task_progress(task: Task) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞–Ω–∏—è"""
        progress_bar = ProgressFormatter.format_progress_bar(
            task.completed_executions, 
            task.target_executions,
            8
        )
        stats = ProgressFormatter.format_completion_stats(
            task.completed_executions,
            task.target_executions
        )
        return f"{progress_bar} {stats}"

class TableFormatter:
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def format_stats_table(stats: dict, title: str = "–°–¢–ê–¢–ò–°–¢–ò–ö–ê") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã"""
        lines = [f"üìä <b>{title}</b>", ""]
        
        for key, value in stats.items():
            if isinstance(value, (int, float)):
                if isinstance(value, float) and value != int(value):
                    formatted_value = f"{value:.2f}"
                else:
                    formatted_value = f"{int(value):,}"
            else:
                formatted_value = str(value)
            
            lines.append(f"‚îú {key}: {formatted_value}")
        
        return "\n".join(lines)
    
    @staticmethod
    def format_referral_list(referrals: List[User], page: int = 1) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
        if not referrals:
            return "üì≠ –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—É—Å—Ç"
        
        lines = [f"üë• <b>–†–ï–§–ï–†–ê–õ–´</b> (—Å—Ç—Ä. {page}):", ""]
        
        for i, referral in enumerate(referrals, 1):
            level_emoji = StatusFormatter.get_level_emoji(referral.level)
            username = TextFormatter.format_username(referral.username, referral.telegram_id)
            date = TimeFormatter.format_datetime(referral.created_at, show_time=False)
            
            lines.append(f"{i}. {level_emoji} {username}")
            lines.append(f"   ‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {date}")
            lines.append(f"   ‚îú –ó–∞–¥–∞–Ω–∏–π: {referral.tasks_completed}")
            lines.append(f"   ‚îî –ë–∞–ª–∞–Ω—Å: {NumberFormatter.format_gram(referral.balance)}")
            lines.append("")
        
        return "\n".join(lines[:-1])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É