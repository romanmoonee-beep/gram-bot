from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from app.database.models.user import User
from app.database.models.task import TaskType
from app.services.task_service import TaskService
from app.bot.keyboards.earn import EarnCallback, get_earn_menu_keyboard, get_task_list_keyboard, get_task_view_keyboard, get_task_execution_keyboard
from app.bot.keyboards.main_menu import MainMenuCallback
from app.bot.utils.messages import get_task_list_text, get_task_text, get_task_execution_text, get_error_message, get_success_message

router = Router()

@router.message(Command("earn"))
async def cmd_earn(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /earn"""
    text = """üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await message.answer(
        text,
        reply_markup=get_earn_menu_keyboard()
    )

@router.callback_query(EarnCallback.filter(F.action == "menu"))
async def show_earn_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    text = """üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_earn_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "list"))
async def show_task_list(
    callback: CallbackQuery, 
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    task_type = None if callback_data.task_type == "all" else TaskType(callback_data.task_type)
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    tasks = await task_service.get_available_tasks(
        user=user,
        task_type=task_type,
        limit=limit + 1,  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        offset=offset
    )
    
    has_next = len(tasks) > limit
    if has_next:
        tasks = tasks[:limit]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = get_task_list_text(tasks, callback_data.task_type, page)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_task_list_keyboard(tasks, callback_data.task_type, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "view"))
async def view_task(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    task = await task_service.get_task_by_id(callback_data.task_id)
    
    if not task:
        await callback.answer(get_error_message("task_not_found"), show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    if not task.is_active:
        await callback.answer(get_error_message("task_not_active"), show_alert=True)
        return
    
    if not task.can_be_executed_by_user(user.level):
        await callback.answer(get_error_message("level_insufficient"), show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    text = get_task_text(task, user)
    keyboard = get_task_view_keyboard(task, user)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "execute"))
async def execute_task(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    task = await task_service.get_task_by_id(callback_data.task_id)
    
    if not task:
        await callback.answer(get_error_message("task_not_found"), show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    execution = await task_service.execute_task(
        task_id=task.id,
        user_id=user.telegram_id
    )
    
    if not execution:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    text = get_task_execution_text(task, user)
    keyboard = get_task_execution_keyboard(task)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞—á–∞—Ç–æ!")

@router.callback_query(EarnCallback.filter(F.action == "check"))
async def check_task_execution(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    task = await task_service.get_task_by_id(callback_data.task_id)
    
    if not task:
        await callback.answer(get_error_message("task_not_found"), show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    executions = await task_service.get_user_executions(
        user.telegram_id,
        limit=1
    )
    
    execution = None
    for ex in executions:
        if ex.task_id == task.id and ex.status.value == "pending":
            execution = ex
            break
    
    if not execution:
        await callback.answer("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Telegram API
    # –ü–æ–∫–∞ —á—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º
    success = await task_service.complete_task_execution(
        execution.id,
        auto_checked=True
    )
    
    if success:
        user_config = user.get_level_config()
        final_reward = task.reward_amount * user_config['task_multiplier']
        
        success_text = f"""‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û!</b>

üéØ {task.title}
üí∞ +{final_reward:,.0f} GRAM –∑–∞—á–∏—Å–ª–µ–Ω–æ

üéâ –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞!"""
        
        from app.bot.keyboards.main_menu import get_main_menu_keyboard
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_main_menu_keyboard(user)
        )
        await callback.answer("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º!")
    else:
        await callback.answer("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "info"))
async def show_task_info(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏"""
    task = await task_service.get_task_by_id(callback_data.task_id)
    
    if not task:
        await callback.answer(get_error_message("task_not_found"), show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏—è
    analytics = await task_service.get_task_analytics(task.id)
    
    info_text = f"""‚ÑπÔ∏è <b>–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>

üéØ <b>–ó–∞–¥–∞–Ω–∏–µ:</b> {task.title}
üë§ <b>–ê–≤—Ç–æ—Ä:</b> ID{task.author_id}
üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}

üìä <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.completed_executions}/{task.target_executions}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {task.completion_percentage:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {task.remaining_executions}

üí∞ <b>–ù–ê–ì–†–ê–î–´:</b>
‚îú –ó–∞ –∑–∞–¥–∞–Ω–∏–µ: {task.reward_amount:,.0f} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {task.spent_budget:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {task.remaining_budget:,.0f} GRAM

‚è±Ô∏è <b>–í–†–ï–ú–Ø:</b>"""
    
    if task.expires_at:
        remaining = task.expires_at - task.created_at
        hours = int(remaining.total_seconds() // 3600)
        info_text += f"\n‚îú –û—Å—Ç–∞–ª–æ—Å—å: {hours} —á–∞—Å–æ–≤"
    else:
        info_text += "\n‚îú –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
    
    if analytics and analytics.get('timing'):
        avg_time = analytics['timing']['average_seconds']
        info_text += f"\n‚îî –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.0f} —Å–µ–∫"
    
    from app.bot.keyboards.earn import get_task_view_keyboard
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_task_view_keyboard(task, callback.from_user)
    )
    await callback.answer()

