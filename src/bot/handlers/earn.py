from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from app.database.models.user import User
from app.database.models.task import TaskType
from app.services.task_service import TaskService
from app.bot.keyboards.earn import EarnCallback, get_earn_menu_keyboard, get_task_list_keyboard, get_task_view_keyboard, get_task_execution_keyboard
from app.bot.keyboards.main_menu import MainMenuCallback
from app.bot.utils.messages import get_task_list_text, get_task_text, get_task_execution_text, get_error_message, get_success_message

router = Router()

@router.message(Command("earn"))
async def cmd_earn(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /earn"""
    text = """üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await message.answer(
        text,
        reply_markup=get_earn_menu_keyboard()
    )

@router.callback_query(MainMenuCallback.filter(F.action == "earn"))
async def show_earn_from_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    text = """üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_earn_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "menu"))
async def show_earn_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    text = """üí∞ <b>–ó–ê–†–ê–ë–û–¢–ê–¢–¨ GRAM</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã - –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã - –±—ã—Å—Ç—Ä–∞—è –Ω–∞–≥—Ä–∞–¥–∞  
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤ - –ª–µ–≥–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ—Å—Ç—ã - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–æ–≤ - –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞

üíé <b>–í–∞—à —É—Ä–æ–≤–µ–Ω—å:</b> {user.get_level_config()['name']}
‚ö° <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥:</b> x{user.get_level_config()['task_multiplier']}

üí° <i>–ß–µ–º –≤—ã—à–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_earn_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(EarnCallback.filter(F.action == "list"))
async def show_task_list(
    callback: CallbackQuery, 
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    task_type = None if callback_data.task_type == "all" else TaskType(callback_data.task_type)
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
        tasks = await task_service.get_available_tasks(
            user=user,
            task_type=task_type,
            limit=limit + 1,  # +1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            offset=offset
        )
        
        has_next = len(tasks) > limit
        if has_next:
            tasks = tasks[:limit]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = get_task_list_text(tasks, callback_data.task_type, page)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_task_list_keyboard(tasks, callback_data.task_type, page, has_next)
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error("Error loading tasks", error=str(e), user_id=user.telegram_id)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π", show_alert=True)

@router.callback_query(EarnCallback.filter(F.action == "view"))
async def view_task(
    callback: CallbackQuery,
    callback_data: EarnCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        task = await task_service.get_task_by_id(callback_data.task_id)
        
        if not task:
            await callback.answer(get_error_message("task_not_found"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
        if not task.is_active:
            await callback.answer(get_error_message("task_not_active"), show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if task.min_user_level:
            level_hierarchy = ["bronze", "silver", "gold", "premium"]
            if user.level not in level_hierarchy:
                await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                return
                
            required_index = level_hierarchy.index(task.min_user_level)
            user_index = level_hierarchy.index(user.level)
            
            if user_index < required_index:
                level_names = {
                    "bronze": "ü•â Bronze",
                    "silver": "ü•à Silver",
                    "gold": "ü•á Gold",
                    "premium": "üíé Premium"
                }
                required_level = level_names.get(task.min_user_level, task.min_user_level)
                await callback.answer(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {required_level}", show_alert=True)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ
        user_executions = await task_service.get_user_executions(user.telegram_id, limit=1000)
        for execution in user_executions
