from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from decimal import Decimal

from app.database.models.user import User
from app.services.settings_service import SettingsService
from app.bot.keyboards.main_menu import MainMenuCallback, get_main_menu_keyboard

router = Router()

# Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
from aiogram.filters.callback_data import CallbackData

class SettingsCallback(CallbackData, prefix="settings"):
    action: str
    setting: str = "none"
    value: str = "none"

async def get_settings_keyboard(user_id: int, settings_service: SettingsService):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    builder.row(
        InlineKeyboardButton(
            text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            callback_data=SettingsCallback(action="notifications").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üåê –Ø–∑—ã–∫",
            callback_data=SettingsCallback(action="language").pack()
        ),
        InlineKeyboardButton(
            text="üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å",
            callback_data=SettingsCallback(action="privacy").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üí∏ –ê–≤—Ç–æ–≤—ã–≤–æ–¥",
            callback_data=SettingsCallback(action="auto_withdraw").pack()
        ),
        InlineKeyboardButton(
            text="üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
            callback_data=SettingsCallback(action="security").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üì• –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            callback_data=SettingsCallback(action="export").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data=MainMenuCallback(action="main_menu").pack()
        )
    )
    
    return builder.as_markup()

async def get_notifications_keyboard(user_id: int, settings_service: SettingsService):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    settings = await settings_service.get_user_settings(user_id)
    
    builder = InlineKeyboardBuilder()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö
    task_status = "‚úÖ –í–ö–õ" if settings.task_notifications else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üéØ –ó–∞–¥–∞–Ω–∏—è: {task_status}",
            callback_data=SettingsCallback(
                action="toggle", 
                setting="tasks", 
                value="off" if settings.task_notifications else "on"
            ).pack()
        )
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö
    payment_status = "‚úÖ –í–ö–õ" if settings.payment_notifications else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üí∞ –ü–ª–∞—Ç–µ–∂–∏: {payment_status}",
            callback_data=SettingsCallback(
                action="toggle",
                setting="payments",
                value="off" if settings.payment_notifications else "on"
            ).pack()
        )
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö
    referral_status = "‚úÖ –í–ö–õ" if settings.referral_notifications else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {referral_status}",
            callback_data=SettingsCallback(
                action="toggle",
                setting="referrals",
                value="off" if settings.referral_notifications else "on"
            ).pack()
        )
    )
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    admin_status = "‚úÖ –í–ö–õ" if settings.admin_notifications else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üë®‚Äçüíº –ê–¥–º–∏–Ω: {admin_status}",
            callback_data=SettingsCallback(
                action="toggle",
                setting="admin",
                value="off" if settings.admin_notifications else "on"
            ).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

async def get_privacy_keyboard(user_id: int, settings_service: SettingsService):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    settings = await settings_service.get_user_settings(user_id)
    
    builder = InlineKeyboardBuilder()
    
    # –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    profile_status = "‚úÖ –í–ö–õ" if settings.hide_profile else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üë§ –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {profile_status}",
            callback_data=SettingsCallback(
                action="toggle_privacy",
                setting="hide_profile", 
                value="off" if settings.hide_profile else "on"
            ).pack()
        )
    )
    
    # –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_status = "‚úÖ –í–ö–õ" if settings.hide_stats else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üìä –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {stats_status}",
            callback_data=SettingsCallback(
                action="toggle_privacy",
                setting="hide_stats",
                value="off" if settings.hide_stats else "on"
            ).pack()
        )
    )
    
    # –°–∫—Ä—ã—Ç—å –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞
    leaderboard_status = "‚úÖ –í–ö–õ" if settings.hide_from_leaderboard else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üèÜ –°–∫—Ä—ã—Ç—å –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞: {leaderboard_status}",
            callback_data=SettingsCallback(
                action="toggle_privacy",
                setting="hide_from_leaderboard",
                value="off" if settings.hide_from_leaderboard else "on"
            ).pack()
        )
    )
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    mentions_status = "‚úÖ –í–ö–õ" if settings.allow_referral_mentions else "‚ùå –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {mentions_status}",
            callback_data=SettingsCallback(
                action="toggle_privacy",
                setting="allow_referral_mentions",
                value="off" if settings.allow_referral_mentions else "on"
            ).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    return builder.as_markup()

@router.message(Command("settings"))
async def cmd_settings(message: Message, user: User, settings_service: SettingsService):
    """–ö–æ–º–∞–Ω–¥–∞ /settings"""
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    text = f"""‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏
üåê <b>–Ø–∑—ã–∫:</b> {settings.language.upper()}
üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
üí∏ <b>–ê–≤—Ç–æ–≤—ã–≤–æ–¥:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω' if settings.auto_withdraw_enabled else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b> - –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è:</b>
‚îú –ü—Ä–æ—Ñ–∏–ª—å: {'üîí –°–∫—Ä—ã—Ç' if settings.hide_profile else 'üëÄ –í–∏–¥–µ–Ω'}
‚îú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'üîí –°–∫—Ä—ã—Ç–∞' if settings.hide_stats else 'üëÄ –í–∏–¥–Ω–∞'}
‚îî –í —Ä–µ–π—Ç–∏–Ω–≥–µ: {'‚ùå –ù–µ—Ç' if settings.hide_from_leaderboard else '‚úÖ –î–∞'}

üí° <i>–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</i>"""
    
    keyboard = await get_settings_keyboard(user.telegram_id, settings_service)
    
    await message.answer(text, reply_markup=keyboard)

@router.callback_query(MainMenuCallback.filter(F.action == "settings"))
async def show_settings_menu(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    text = f"""‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò</b>

–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏
üåê <b>–Ø–∑—ã–∫:</b> {settings.language.upper()}
üîí <b>–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</b> - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
üí∏ <b>–ê–≤—Ç–æ–≤—ã–≤–æ–¥:</b> {'üü¢ –í–∫–ª—é—á–µ–Ω' if settings.auto_withdraw_enabled else 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω'}
üîê <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</b> - –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è:</b>
‚îú –ü—Ä–æ—Ñ–∏–ª—å: {'üîí –°–∫—Ä—ã—Ç' if settings.hide_profile else 'üëÄ –í–∏–¥–µ–Ω'}
‚îú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {'üîí –°–∫—Ä—ã—Ç–∞' if settings.hide_stats else 'üëÄ –í–∏–¥–Ω–∞'}
‚îî –í —Ä–µ–π—Ç–∏–Ω–≥–µ: {'‚ùå –ù–µ—Ç' if settings.hide_from_leaderboard else '‚úÖ –î–∞'}

üí° <i>–ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞</i>"""
    
    keyboard = await get_settings_keyboard(user.telegram_id, settings_service)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(SettingsCallback.filter(F.action == "menu"))
async def show_settings_menu_callback(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ callback"""
    await show_settings_menu(callback, user, settings_service)

@router.callback_query(SettingsCallback.filter(F.action == "notifications"))
async def show_notifications_settings(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    text = f"""üîî <b>–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–∏–ø–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

üéØ <b>–ó–∞–¥–∞–Ω–∏—è:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.task_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚îú –ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
‚îú –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
‚îî –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

üí∞ <b>–ü–ª–∞—Ç–µ–∂–∏:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.payment_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚îú –£—Å–ø–µ—à–Ω—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
‚îú –°–ø–∏—Å–∞–Ω–∏—è –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
‚îî –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥

üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.referral_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚îú –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚îú –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã

üë®‚Äçüíº <b>–ê–¥–º–∏–Ω:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.admin_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚îú –°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚îú –í–∞–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
‚îî –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã

üí° <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å</i>"""
    
    keyboard = await get_notifications_keyboard(user.telegram_id, settings_service)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(SettingsCallback.filter(F.action == "language"))
async def show_language_settings(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    builder = InlineKeyboardBuilder()
    
    ru_status = "‚úÖ" if settings.language == "ru" else ""
    en_status = "‚úÖ" if settings.language == "en" else ""
    
    builder.row(
        InlineKeyboardButton(
            text=f"üá∑üá∫ –†—É—Å—Å–∫–∏–π {ru_status}",
            callback_data=SettingsCallback(action="set_language", setting="language", value="ru").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text=f"üá∫üá∏ English {en_status}",
            callback_data=SettingsCallback(action="set_language", setting="language", value="en").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    text = f"""üåê <b>–í–´–ë–û–† –Ø–ó–´–ö–ê</b>

–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: <b>{settings.language.upper()}</b>

–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:

üá∑üá∫ <b>–†—É—Å—Å–∫–∏–π</b> - –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
üá∫üá∏ <b>English</b> - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

üí° <i>–ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è</i>"""
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(SettingsCallback.filter(F.action == "privacy"))
async def show_privacy_settings(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    text = f"""üîí <b>–ù–ê–°–¢–†–û–ô–ö–ò –ü–†–ò–í–ê–¢–ù–û–°–¢–ò</b>

–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

üë§ <b>–°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.hide_profile else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚îú –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îî –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞–º

üìä <b>–°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.hide_stats else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚îú –°–∫—Ä—ã—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚îî –ó–∞—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É–¥—É—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏

üèÜ <b>–°–∫—Ä—ã—Ç—å –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.hide_from_leaderboard else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚îú –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ç–æ–ø–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îî –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤

üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–æ' if settings.allow_referral_mentions else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ'}
‚îú –†–∞–∑—Ä–µ—à–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–∞—Ö
‚îî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üí° <i>–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö</i>"""
    
    keyboard = await get_privacy_keyboard(user.telegram_id, settings_service)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(SettingsCallback.filter(F.action == "auto_withdraw"))
async def show_auto_withdraw_settings(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    builder = InlineKeyboardBuilder()
    
    if settings.auto_withdraw_enabled:
        builder.row(
            InlineKeyboardButton(
                text="üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–≤–æ–¥",
                callback_data=SettingsCallback(action="toggle_auto_withdraw", value="off").pack()
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                callback_data=SettingsCallback(action="setup_auto_withdraw").pack()
            )
        )
    else:
        builder.row(
            InlineKeyboardButton(
                text="üü¢ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–≤–æ–¥",
                callback_data=SettingsCallback(action="setup_auto_withdraw").pack()
            )
        )
    
    builder.row(
        InlineKeyboardButton(
            text="üìã –ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã",
            callback_data=SettingsCallback(action="my_withdraw_info").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    status_text = ""
    if settings.auto_withdraw_enabled:
        status_text = f"""
‚úÖ <b>–ê–í–¢–û–í–´–í–û–î –ê–ö–¢–ò–í–ï–ù</b>

üí∞ <b>–ü–æ—Ä–æ–≥:</b> {settings.auto_withdraw_threshold:,.0f} GRAM
üí≥ <b>–ú–µ—Ç–æ–¥:</b> {settings.auto_withdraw_method or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìç <b>–ê–¥—Ä–µ—Å:</b> {settings.auto_withdraw_address[:20] + '...' if settings.auto_withdraw_address and len(settings.auto_withdraw_address) > 20 else settings.auto_withdraw_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}

‚ö° –°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞."""
    else:
        status_text = """‚ùå <b>–ê–í–¢–û–í–´–í–û–î –û–¢–ö–õ–Æ–ß–ï–ù</b>

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."""
    
    text = f"""üí∏ <b>–ê–í–¢–û–í–´–í–û–î –°–†–ï–î–°–¢–í</b>

{status_text}

üîß <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ä–æ–≥–∞ –∞–≤—Ç–æ–≤—ã–≤–æ–¥–∞ (–æ—Ç 100 GRAM)
‚Ä¢ –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤

üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã:</b>
‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
‚Ä¢ üè¶ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!"""
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(SettingsCallback.filter(F.action == "security"))
async def show_security_settings(callback: CallbackQuery, user: User, settings_service: SettingsService):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    settings = await settings_service.get_user_settings(user.telegram_id)
    
    builder = InlineKeyboardBuilder()
    
    # –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    tf_status = "üü¢ –í–ö–õ" if settings.two_factor_enabled else "üî¥ –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üîê 2FA: {tf_status}",
            callback_data=SettingsCallback(
                action="toggle_2fa",
                value="off" if settings.two_factor_enabled else "on"
            ).pack()
        )
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö
    login_status = "üü¢ –í–ö–õ" if settings.login_notifications else "üî¥ –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö: {login_status}",
            callback_data=SettingsCallback(
                action="toggle_login_notifications",
                value="off" if settings.login_notifications else "on"
            ).pack()
        )
    )
    
    # API –¥–æ—Å—Ç—É–ø
    api_status = "üü¢ –í–ö–õ" if settings.api_access_enabled else "üî¥ –í–´–ö–õ"
    builder.row(
        InlineKeyboardButton(
            text=f"üîå API –¥–æ—Å—Ç—É–ø: {api_status}",
            callback_data=SettingsCallback(
                action="toggle_api",
                value="off" if settings.api_access_enabled else "on"
            ).pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîë –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å",
            callback_data=SettingsCallback(action="change_password").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    text = f"""üîê <b>–ù–ê–°–¢–†–û–ô–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò</b>

–ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏:

üîê <b>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if settings.two_factor_enabled else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}
‚îú –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
‚îú –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
‚îî –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if settings.login_notifications else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}
‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏—è—Ö
‚îú –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
‚îî –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞

üîå <b>API –¥–æ—Å—Ç—É–ø:</b> {'‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω' if settings.api_access_enabled else '‚ùå –ó–∞–ø—Ä–µ—â–µ–Ω'}
‚îú –î–æ—Å—Ç—É–ø –∫ API –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
‚îú –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
‚îî –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º

üí° <i>–í–∫–ª—é—á–µ–Ω–∏–µ 2FA –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</i>"""
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(SettingsCallback.filter(F.action == "toggle"))
async def toggle_notification_setting(
    callback: CallbackQuery, 
    callback_data: SettingsCallback,
    user: User,
    settings_service: SettingsService
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    setting = callback_data.setting
    enabled = callback_data.value == "on"
    
    success = await settings_service.update_notification_setting(
        user.telegram_id, setting, enabled
    )
    
    if success:
        setting_names = {
            "tasks": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞–Ω–∏—è—Ö",
            "payments": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞—Ç–µ–∂–∞—Ö", 
            "referrals": "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö",
            "admin": "–∞–¥–º–∏–Ω—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        }
        
        setting_name = setting_names.get(setting, setting)
        action_text = "–≤–∫–ª—é—á–µ–Ω—ã" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        await callback.answer(f"‚úÖ {setting_name.title()} {action_text}")
        await show_notifications_settings(callback, user, settings_service)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

@router.callback_query(SettingsCallback.filter(F.action == "toggle_privacy"))
async def toggle_privacy_setting(
    callback: CallbackQuery,
    callback_data: SettingsCallback, 
    user: User,
    settings_service: SettingsService
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏"""
    setting = callback_data.setting
    enabled = callback_data.value == "on"
    
    success = await settings_service.update_privacy_setting(
        user.telegram_id, setting, enabled
    )
    
    if success:
        setting_names = {
            "hide_profile": "—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è",
            "hide_stats": "—Å–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            "hide_from_leaderboard": "—Å–∫—Ä—ã—Ç–∏–µ –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞",
            "allow_referral_mentions": "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        }
        
        setting_name = setting_names.get(setting, setting)
        action_text = "–≤–∫–ª—é—á–µ–Ω–æ" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        
        await callback.answer(f"‚úÖ {setting_name.title()} {action_text}")
        await show_privacy_settings(callback, user, settings_service)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

@router.callback_query(SettingsCallback.filter(F.action == "set_language"))
async def set_language(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    user: User,
    settings_service: SettingsService
):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫"""
    language = callback_data.value
    
    if language == "en":
        await callback.answer("üá∫üá∏ English –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±—É–¥—É—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö", show_alert=True)
        return
    
    success = await settings_service.set_language(user.telegram_id, language)
    
    if success:
        await callback.answer(f"üåê –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language.upper()}")
        await show_language_settings(callback, user, settings_service)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞", show_alert=True)

@router.callback_query(SettingsCallback.filter(F.action == "toggle_2fa"))
async def toggle_two_factor(
    callback: CallbackQuery,
    callback_data: SettingsCallback,
    user: User,
    settings_service: SettingsService
):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    enabled = callback_data.value == "on"
    
    if enabled:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA
        await callback.answer("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
        return
    
    success = await settings_service.enable_two_factor(user.telegram_id, enabled)
    
    if success:
        action_text = "–≤–∫–ª—é—á–µ–Ω–∞" if enabled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
        await callback.answer(f"üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è {action_text}")
        await show_security_settings(callback, user, settings_service)
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)

@router.callback_query(SettingsCallback.filter(F.action == "export"))
async def export_settings(
    callback: CallbackQuery,
    user: User,
    settings_service: SettingsService
):
    """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings_data = await settings_service.export_user_settings(user.telegram_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
    export_text = f"""üì• <b>–≠–ö–°–ü–û–†–¢ –ù–ê–°–¢–†–û–ï–ö</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user.telegram_id}
üìÖ <b>–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üîî <b>–£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:</b>
‚îú –ó–∞–¥–∞–Ω–∏—è: {'‚úÖ' if settings_data['notifications']['tasks'] else '‚ùå'}
‚îú –ü–ª–∞—Ç–µ–∂–∏: {'‚úÖ' if settings_data['notifications']['payments'] else '‚ùå'}
‚îú –†–µ—Ñ–µ—Ä–∞–ª—ã: {'‚úÖ' if settings_data['notifications']['referrals'] else '‚ùå'}
‚îî –ê–¥–º–∏–Ω: {'‚úÖ' if settings_data['notifications']['admin'] else '‚ùå'}

üîí <b>–ü–†–ò–í–ê–¢–ù–û–°–¢–¨:</b>
‚îú –°–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: {'‚úÖ' if settings_data['privacy']['hide_profile'] else '‚ùå'}
‚îú –°–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {'‚úÖ' if settings_data['privacy']['hide_stats'] else '‚ùå'}
‚îú –°–∫—Ä—ã—Ç—å –∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞: {'‚úÖ' if settings_data['privacy']['hide_from_leaderboard'] else '‚ùå'}
‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'‚úÖ' if settings_data['privacy']['allow_referral_mentions'] else '‚ùå'}

üåê <b>–õ–û–ö–ê–õ–ò–ó–ê–¶–ò–Ø:</b>
‚îú –Ø–∑—ã–∫: {settings_data['localization']['language'].upper()}
‚îî –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {settings_data['localization']['timezone']}

üí∏ <b>–ê–í–¢–û–í–´–í–û–î:</b>
‚îú –í–∫–ª—é—á–µ–Ω: {'‚úÖ' if settings_data['auto_withdraw']['enabled'] else '‚ùå'}
‚îú –ü–æ—Ä–æ–≥: {settings_data['auto_withdraw']['threshold']:,.0f} GRAM
‚îú –ú–µ—Ç–æ–¥: {settings_data['auto_withdraw']['method'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚îî –ê–¥—Ä–µ—Å: {settings_data['auto_withdraw']['address'][:20] + '...' if settings_data['auto_withdraw']['address'] and len(settings_data['auto_withdraw']['address']) > 20 else settings_data['auto_withdraw']['address'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîê <b>–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:</b>
‚îú 2FA: {'‚úÖ' if settings_data['security']['two_factor_enabled'] else '‚ùå'}
‚îú –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥–∞—Ö: {'‚úÖ' if settings_data['security']['login_notifications'] else '‚ùå'}
‚îî API –¥–æ—Å—Ç—É–ø: {'‚úÖ' if settings_data['security']['api_access_enabled'] else '‚ùå'}

üíæ <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫</i>"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            callback_data=SettingsCallback(action="menu").pack()
        )
    )
    
    await callback.message.edit_text(export_text, reply_markup=builder.as_markup())
    await callback.answer("üì• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
