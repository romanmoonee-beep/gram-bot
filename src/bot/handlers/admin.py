from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from decimal import Decimal

from app.database.models.user import User
from app.services.user_service import UserService
from app.services.task_service import TaskService
from app.services.transaction_service import TransactionService
from app.services.check_service import CheckService
from app.bot.keyboards.admin import (
    AdminCallback, get_admin_menu_keyboard, get_moderation_keyboard,
    get_task_moderation_keyboard, get_user_management_keyboard
)
from app.bot.keyboards.main_menu import get_main_menu_keyboard
from app.bot.states.admin_states import AdminStates
from app.bot.filters.admin import AdminFilter
from app.config.settings import settings

router = Router()
router.message.filter(AdminFilter())  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
router.callback_query.filter(AdminFilter())

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin"""
    text = """üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await message.answer(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "menu"))
async def show_admin_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    text = """üîß <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨</b>
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "moderation"))
async def show_moderation_menu(callback: CallbackQuery, task_service: TaskService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    from app.database.models.task_execution import ExecutionStatus
    from sqlalchemy import select, func
    from app.database.database import get_session
    
    async with get_session() as session:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
        pending_result = await session.execute(
            select(func.count()).select_from(
                session.query(TaskExecution).filter(
                    TaskExecution.status == ExecutionStatus.PENDING
                ).subquery()
            )
        )
        pending_count = pending_result.scalar() or 0
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        manual_result = await session.execute(
            select(func.count()).select_from(
                session.query(TaskExecution).filter(
                    and_(
                        TaskExecution.status == ExecutionStatus.PENDING,
                        TaskExecution.auto_checked == False
                    )
                ).subquery()
            )
        )
        manual_count = manual_result.scalar() or 0
    
    text = f"""üîç <b>–ú–û–î–ï–†–ê–¶–ò–Ø –ó–ê–î–ê–ù–ò–ô</b>

üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {pending_count}
‚îú –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {manual_count}
‚îú –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: {pending_count - manual_count}
‚îî –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {pending_count}

‚ö° <b>–ë–´–°–¢–†–´–ï –î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_moderation_keyboard()
    )
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "pending_tasks"))
async def show_pending_tasks(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    page = callback_data.page
    limit = 5
    offset = (page - 1) * limit
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
    from app.database.models.task_execution import TaskExecution, ExecutionStatus
    from app.database.database import get_session
    from sqlalchemy import select, desc
    
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution)
            .where(TaskExecution.status == ExecutionStatus.PENDING)
            .order_by(desc(TaskExecution.created_at))
            .limit(limit + 1)
            .offset(offset)
        )
        
        executions = list(result.scalars().all())
        has_next = len(executions) > limit
        if has_next:
            executions = executions[:limit]
    
    if not executions:
        text = """üîç <b>–ó–ê–î–ê–ù–ò–Ø –ù–ê –ü–†–û–í–ï–†–ö–ï</b>

‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!

üìä –í –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç."""
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="moderation").pack()
            )
        )
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        return
    
    text = f"""üîç <b>–ó–ê–î–ê–ù–ò–Ø –ù–ê –ü–†–û–í–ï–†–ö–ï</b>

üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} | –í—Å–µ–≥–æ: {len(executions)}

–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–¥–∞–Ω–∏—è
    for execution in executions:
        task_title = execution.task.title[:30] + "..." if len(execution.task.title) > 30 else execution.task.title
        username = execution.user.username or f"ID{execution.user_id}"
        
        button_text = f"üéØ {task_title} | @{username}"
        
        builder.row(
            InlineKeyboardButton(
                text=button_text,
                callback_data=AdminCallback(action="review_task", target_id=execution.id).pack()
            )
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=AdminCallback(action="pending_tasks", page=page-1).pack()
            )
        )
    
    if has_next:
        nav_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
                callback_data=AdminCallback(action="pending_tasks", page=page+1).pack()
            )
        )
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏",
            callback_data=AdminCallback(action="approve_auto").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
            callback_data=AdminCallback(action="moderation").pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "review_task"))
async def review_task_execution(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    task_service: TaskService
):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    from app.database.models.task_execution import TaskExecution
    from app.database.database import get_session
    from sqlalchemy import select
    
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution).where(TaskExecution.id == execution_id)
        )
        execution = result.scalar_one_or_none()
    
    if not execution:
        await callback.answer("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    task = execution.task
    user = execution.user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫—É
    auto_check_text = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if execution.auto_checked else "‚è≥ –¢—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    text = f"""üìã <b>–ü–†–û–í–ï–†–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>

üéØ <b>–ó–ê–î–ê–ù–ò–ï:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: {task.title}
‚îú –¢–∏–ø: {task.type}
‚îú –ê–≤—Ç–æ—Ä: ID{task.author_id}
‚îî –ù–∞–≥—Ä–∞–¥–∞: {execution.reward_amount:,.0f} GRAM

üë§ <b>–ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨:</b>
‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–±–µ–∑ username'}
‚îú ID: {user.telegram_id}
‚îú –£—Ä–æ–≤–µ–Ω—å: {user.level}
‚îî –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution.created_at.strftime('%d.%m.%Y %H:%M')}

üîç <b>–ü–†–û–í–ï–†–ö–ê:</b>
‚îú –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞: {auto_check_text}
‚îú –°—Å—ã–ª–∫–∞: {task.target_url}
‚îî –°—Ç–∞—Ç—É—Å: {execution.status}"""
    
    if execution.user_comment:
        text += f"\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n{execution.user_comment}"
    
    if execution.screenshot_url:
        text += f"\n\nüì∑ <b>–°–∫—Ä–∏–Ω—à–æ—Ç:</b> –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω"
    
    keyboard = get_task_moderation_keyboard(execution.id)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "approve"))
async def approve_task_execution(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    task_service: TaskService
):
    """–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    success = await task_service.complete_task_execution(
        execution_id,
        auto_checked=False,
        reviewer_id=callback.from_user.id,
        review_comment="–û–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
    )
    
    if success:
        await callback.answer("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ –∏ –æ–ø–ª–∞—á–µ–Ω–æ")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
        await show_pending_tasks(
            callback,
            AdminCallback(action="pending_tasks", page=1),
            task_service
        )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", show_alert=True)

@router.callback_query(AdminCallback.filter(F.action == "reject"))
async def start_reject_task(
    callback: CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    execution_id = callback_data.target_id
    
    await state.set_state(AdminStates.entering_reject_reason)
    await state.update_data(execution_id=execution_id)
    
    text = """‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø</b>

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∏—á–∏–Ω:</b>
‚Ä¢ –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π
‚Ä¢ –§–∞–ª—å—à–∏–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_reject_reason)
async def process_reject_reason(
    message: Message,
    state: FSMContext,
    task_service: TaskService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    reason = message.text.strip()
    
    if len(reason) > 200:
        await message.answer("‚ùå –ü—Ä–∏—á–∏–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    execution_id = data['execution_id']
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    from app.database.models.task_execution import TaskExecution, ExecutionStatus
    from app.database.database import get_session
    from sqlalchemy import select
    
    async with get_session() as session:
        result = await session.execute(
            select(TaskExecution).where(TaskExecution.id == execution_id)
        )
        execution = result.scalar_one_or_none()
        
        if execution:
            execution.status = ExecutionStatus.REJECTED
            execution.reviewer_id = message.from_user.id
            execution.review_comment = reason
            execution.reviewed_at = datetime.utcnow()
            
            await session.commit()
    
    await state.clear()
    
    text = f"""‚úÖ <b>–í–´–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>

–ü—Ä–∏—á–∏–Ω–∞: {reason}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏."""
    
    await message.answer(
        text,
        reply_markup=get_admin_menu_keyboard()
    )

@router.callback_query(AdminCallback.filter(F.action == "users"))
async def show_user_management(callback: CallbackQuery, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    from app.database.database import get_session
    from app.database.models.user import User, UserLevel
    from sqlalchemy import select, func
    
    async with get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = await session.execute(select(func.count(User.id)))
        total_count = total_users.scalar() or 0
        
        # –ü–æ —É—Ä–æ–≤–Ω—è–º
        levels_stats = await session.execute(
            select(User.level, func.count(User.id))
            .group_by(User.level)
        )
        
        levels_data = dict(levels_stats.fetchall())
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–±—ã–ª–∏ –æ–Ω–ª–∞–π–Ω –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        from datetime import datetime, timedelta
        week_ago = datetime.utcnow() - timedelta(days=7)
        
        active_users = await session.execute(
            select(func.count(User.id))
            .where(User.last_activity >= week_ago)
        )
        active_count = active_users.scalar() or 0
        
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        banned_users = await session.execute(
            select(func.count(User.id))
            .where(User.is_banned == True)
        )
        banned_count = banned_users.scalar() or 0
    
    text = f"""üë• <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò</b>

üìä <b>–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_count:,}
‚îú –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_count:,}
‚îú –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {banned_count:,}
‚îî –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {(active_count/total_count*100 if total_count > 0 else 0):.1f}%

üìà <b>–ü–û –£–†–û–í–ù–Ø–ú:</b>
‚îú ü•â Bronze: {levels_data.get('bronze', 0):,}
‚îú ü•à Silver: {levels_data.get('silver', 0):,}
‚îú ü•á Gold: {levels_data.get('gold', 0):,}
‚îî üíé Premium: {levels_data.get('premium', 0):,}

‚ö° <b>–î–ï–ô–°–¢–í–ò–Ø:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º
‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_user_management_keyboard()
    )
    await callback.answer()

@router.callback_query(AdminCallback.filter(F.action == "find_user"))
async def start_find_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    await state.set_state(AdminStates.entering_user_id)
    
    text = """üîç <b>–ü–û–ò–°–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username:

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ <code>123456789</code> (Telegram ID)
‚Ä¢ <code>@username</code> (username)

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text)
    await callback.answer()

@router.message(AdminStates.entering_user_id)
async def process_find_user(
    message: Message,
    state: FSMContext,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = message.text.strip()
    
    # –ü–∞—Ä—Å–∏–º –∑–∞–ø—Ä–æ—Å
    if query.startswith('@'):
        username = query[1:]
        # –ü–æ–∏—Å–∫ –ø–æ username
        from app.database.database import get_session
        from sqlalchemy import select
        
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.username == username
