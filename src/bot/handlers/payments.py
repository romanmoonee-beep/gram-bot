from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery, SuccessfulPayment, LabeledPrice
from aiogram.filters import Command

from app.database.models.user import User
from app.services.user_service import UserService
from app.services.transaction_service import TransactionService
from app.bot.keyboards.profile import ProfileCallback, get_deposit_keyboard
from app.bot.keyboards.payments import PaymentCallback, get_payment_confirmation_keyboard
from app.bot.keyboards.main_menu import get_main_menu_keyboard
from app.bot.utils.messages import get_deposit_text, get_success_message
from app.config.settings import settings

router = Router()

@router.callback_query(ProfileCallback.filter(F.action == "buy_stars"))
async def buy_stars_package(
    callback: CallbackQuery,
    callback_data: ProfileCallback,
    user: User
):
    """–ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç Stars"""
    package_name = callback_data.data
    package = settings.get_stars_package(package_name)
    
    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–µ—Ç–∞
    text = get_deposit_text(package_name)
    keyboard = get_payment_confirmation_keyboard(package_name, package["stars"])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(PaymentCallback.filter(F.action == "confirm"))
async def confirm_stars_payment(
    callback: CallbackQuery,
    callback_data: PaymentCallback,
    user: User
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã Stars"""
    package_name = callback_data.package
    stars_amount = callback_data.amount
    
    package = settings.get_stars_package(package_name)
    if not package:
        await callback.answer("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º GRAM
    base_gram, bonus_gram = settings.calculate_gram_from_stars(stars_amount, package_name)
    total_gram = base_gram + bonus_gram
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    prices = [LabeledPrice(label=package["title"], amount=stars_amount)]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {total_gram:,.0f} GRAM"
    if bonus_gram > 0:
        description += f" (–≤–∫–ª—é—á–∞—è –±–æ–Ω—É—Å {bonus_gram:,.0f} GRAM)"
    
    try:
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - {package['title']}",
            description=description,
            payload=f"stars_deposit_{package_name}_{user.telegram_id}",
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω
            currency="XTR",  # –í–∞–ª—é—Ç–∞ Telegram Stars
            prices=prices,
            start_parameter=f"deposit_{package_name}",
            request_timeout=30
        )
        
        await callback.message.edit_text(
            f"""üí≥ <b>–°–ß–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù</b>

üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.
‚≠ê –û–ø–ª–∞—Ç–∏—Ç–µ {stars_amount} Telegram Stars
üí∞ –ü–æ–ª—É—á–∏—Ç–µ {total_gram:,.0f} GRAM

‚ö° –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã!""",
            reply_markup=get_main_menu_keyboard(user)
        )
        
        await callback.answer("üí≥ –°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞", show_alert=True)
        print(f"Invoice error: {e}")

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
    payload = pre_checkout_query.invoice_payload
    
    if not payload.startswith("stars_deposit_"):
        await pre_checkout_query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂")
        return
    
    # –ü–∞—Ä—Å–∏–º payload
    try:
        parts = payload.split("_")
        package_name = parts[2]
        user_id = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
        package = settings.get_stars_package(package_name)
        if not package:
            await pre_checkout_query.answer(ok=False, error_message="–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
        if pre_checkout_query.total_amount != package["stars"]:
            await pre_checkout_query.answer(ok=False, error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞")
            return
        
        await pre_checkout_query.answer(ok=True)
        
    except (ValueError, IndexError):
        await pre_checkout_query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")

@router.message(F.successful_payment)
async def process_successful_payment(
    message: Message,
    user: User,
    transaction_service: TransactionService,
    user_service: UserService
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload = payment.invoice_payload
    
    try:
        # –ü–∞—Ä—Å–∏–º payload
        parts = payload.split("_")
        package_name = parts[2]
        user_id = int(parts[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id != user.telegram_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞—Ç–µ–∂ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç
        package = settings.get_stars_package(package_name)
        if not package:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
        transaction = await transaction_service.process_telegram_stars_payment(
            user_id=user.telegram_id,
            stars_amount=payment.total_amount,
            stars_transaction_id=payment.telegram_payment_charge_id,
            package_name=package_name
        )
        
        if transaction:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—É–º–º—É
            base_gram, bonus_gram = settings.calculate_gram_from_stars(payment.total_amount, package_name)
            total_gram = base_gram + bonus_gram
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            success_text = f"""üéâ <b>–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù!</b>

‚≠ê –û–ø–ª–∞—á–µ–Ω–æ: {payment.total_amount} Telegram Stars
üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: {total_gram:,.0f} GRAM"""
            
            if bonus_gram > 0:
                success_text += f"\nüéÅ –ë–æ–Ω—É—Å: {bonus_gram:,.0f} GRAM"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            updated_user = await user_service.get_user(user.telegram_id)
            success_text += f"\n\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {updated_user.balance:,.0f} GRAM"
            
            success_text += "\n\n‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫."
            
            await message.answer(
                success_text,
                reply_markup=get_main_menu_keyboard(updated_user)
            )
            
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_main_menu_keyboard(user)
            )
            
    except Exception as e:
        print(f"Payment processing error: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard(user)
        )

@router.message(Command("balance"))
async def cmd_balance(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    text = f"""üí∞ <b>–í–ê–® –ë–ê–õ–ê–ù–°</b>

üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: <b>{user.available_balance:,.0f} GRAM</b>
üîí –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ: {user.frozen_balance:,.0f} GRAM
üìä –û–±—â–∏–π: {user.balance:,.0f} GRAM

üìà <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>
‚îú –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned:,.0f} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {user.total_spent:,.0f} GRAM
‚îî –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {user.total_deposited:,.0f} GRAM

üíé –£—Ä–æ–≤–µ–Ω—å: {user.get_level_config()['name']}"""
    
    await message.answer(text, reply_markup=get_deposit_keyboard())

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
@router.callback_query(F.data == "test_payment")
async def test_payment_handler(callback: CallbackQuery, user: User):
    """–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    if not settings.DEBUG:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
        return
    
    # –≠–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    from app.services.transaction_service import TransactionService
    from decimal import Decimal
    
    transaction_service = TransactionService()
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ 1000 GRAM
    success = await transaction_service.process_telegram_stars_payment(
        user_id=user.telegram_id,
        stars_amount=100,
        stars_transaction_id=f"test_{user.telegram_id}_{callback.message.message_id}",
        package_name="basic"
    )
    
    if success:
        await callback.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        await callback.message.edit_text(
            "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ 1000 GRAM –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
            reply_markup=get_main_menu_keyboard(user)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")

# ==============================================================================
# app/bot/states/task_creation.py - FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
# ==============================================================================

from aiogram.fsm.state import State, StatesGroup

class TaskCreationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    entering_title = State()
    entering_description = State()
    entering_url = State()
    entering_reward = State()
    entering_quantity = State()
    confirmation = State()

class TaskExecutionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    uploading_screenshot = State()
    entering_comment = State()
    waiting_check = State()

class CheckCreationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–æ–≤"""
    entering_amount = State()
    entering_recipient = State()
    entering_comment = State()
    entering_password = State()
    confirmation = State()