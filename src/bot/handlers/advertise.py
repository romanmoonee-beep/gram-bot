from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from app.database.models.user import User
from app.database.models.task import TaskType, TaskStatus
from app.services.task_service import TaskService
from app.bot.keyboards.advertise import AdvertiseCallback, get_advertise_menu_keyboard, get_my_tasks_keyboard, get_task_management_keyboard
from app.bot.utils.messages import get_my_tasks_text, get_task_analytics_text, get_error_message, get_success_message
from app.bot.states.task_creation import TaskCreationStates

router = Router()

@router.message(Command("advertise"))
async def cmd_advertise(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /advertise"""
    text = """üì¢ <b>–†–ï–ö–õ–ê–ú–ò–†–û–í–ê–¢–¨</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:

üéØ <b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É - —Ä–æ—Å—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç - –ø–æ–≤—ã—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞ - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üí∞ <b>–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è:</b> {user.get_level_config()['commission_rate']*100:.0f}%
‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    
    await message.answer(
        text,
        reply_markup=get_advertise_menu_keyboard()
    )

@router.callback_query(AdvertiseCallback.filter(F.action == "menu"))
async def show_advertise_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–∫–ª–∞–º—ã"""
    text = """üì¢ <b>–†–ï–ö–õ–ê–ú–ò–†–û–í–ê–¢–¨</b>

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤:

üéØ <b>–¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π:</b>
‚Ä¢ üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
‚Ä¢ üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É - —Ä–æ—Å—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—Ö–≤–∞—Ç–∞
‚Ä¢ üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç - –ø–æ–≤—ã—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ ü§ñ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –±–æ—Ç–∞ - –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

üí∞ <b>–í–∞—à–∞ –∫–æ–º–∏—Å—Å–∏—è:</b> {user.get_level_config()['commission_rate']*100:.0f}%
‚ö° <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –±—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_advertise_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(AdvertiseCallback.filter(F.action == "my_tasks"))
async def show_my_tasks(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    user: User,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è"""
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks = await task_service.get_user_tasks(
        user.telegram_id,
        limit=limit + 1,
        offset=offset
    )
    
    has_next = len(tasks) > limit
    if has_next:
        tasks = tasks[:limit]
    
    text = get_my_tasks_text(tasks, page)
    keyboard = get_my_tasks_keyboard(tasks, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(AdvertiseCallback.filter(F.action == "manage"))
async def manage_task(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    task_service: TaskService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ–º"""
    task = await task_service.get_task_by_id(callback_data.task_id)
    
    if not task:
        await callback.answer(get_error_message("task_not_found"), show_alert=True)
        return
    
    # –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
    status_icons = {
        TaskStatus.ACTIVE: "üü¢ –ê–∫—Ç–∏–≤–Ω–æ–µ",
        TaskStatus.PAUSED: "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
        TaskStatus.COMPLETED: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ",
        TaskStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
        TaskStatus.EXPIRED: "‚è∞ –ò—Å—Ç–µ–∫–ª–æ"
    }
    
    status_text = status_icons.get(task.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""üéØ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ï–ú</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {task.title}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üí∞ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {task.reward_amount:,.0f} GRAM

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {task.completed_executions}/{task.target_executions}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {task.completion_percentage:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {task.remaining_executions}

üí≥ <b>–ë–Æ–î–ñ–ï–¢:</b>
‚îú –û–±—â–∏–π: {task.total_budget:,.0f} GRAM
‚îú –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {task.spent_budget:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {task.remaining_budget:,.0f} GRAM

üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {task.created_at.strftime('%d.%m.%Y %H:%M')}"""
    
    if task.expires_at:
        text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {task.expires_at.strftime('%d.%m.%Y %H:%M')}"
    
    keyboard = get_task_management_keyboard(task)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(AdvertiseCallback.filter(F.action == "pause"))
async def pause_task(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    user: User,
    task_service: TaskService
):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    success = await task_service.pause_task(callback_data.task_id, user.telegram_id)
    
    if success:
        await callback.answer("‚è∏Ô∏è –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        await manage_task(callback, callback_data, task_service)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)

@router.callback_query(AdvertiseCallback.filter(F.action == "resume"))
async def resume_task(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    user: User,
    task_service: TaskService
):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    success = await task_service.resume_task(callback_data.task_id, user.telegram_id)
    
    if success:
        await callback.answer("‚ñ∂Ô∏è –ó–∞–¥–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
        await manage_task(callback, callback_data, task_service)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)

@router.callback_query(AdvertiseCallback.filter(F.action == "cancel"))
async def cancel_task(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    user: User,
    task_service: TaskService
):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    text = """‚ö†Ô∏è <b>–û–¢–ú–ï–ù–ê –ó–ê–î–ê–ù–ò–Ø</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?

üí∞ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.
‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=AdvertiseCallback(action="cancel_confirm", task_id=callback_data.task_id).pack()
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç",
            callback_data=AdvertiseCallback(action="manage", task_id=callback_data.task_id).pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(AdvertiseCallback.filter(F.action == "cancel_confirm"))
async def cancel_task_confirm(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    user: User,
    task_service: TaskService
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è"""
    success = await task_service.cancel_task(callback_data.task_id, user.telegram_id)
    
    if success:
        text = """‚úÖ <b>–ó–ê–î–ê–ù–ò–ï –û–¢–ú–ï–ù–ï–ù–û</b>

–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.
üí∞ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."""
        
        from app.bot.keyboards.main_menu import get_main_menu_keyboard
        
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(user)
        )
        await callback.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)

@router.callback_query(AdvertiseCallback.filter(F.action == "analytics"))
async def show_task_analytics(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    task_service: TaskService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞–¥–∞–Ω–∏—è"""
    analytics = await task_service.get_task_analytics(callback_data.task_id)
    
    if not analytics:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", show_alert=True)
        return
    
    text = get_task_analytics_text(analytics)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
    from app.bot.utils.messages import format_task_execution_stats
    stats_text = format_task_execution_stats(analytics['executions_by_status'])
    text += f"\n{stats_text}"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—é",
            callback_data=AdvertiseCallback(action="manage", task_id=callback_data.task_id).pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
@router.callback_query(AdvertiseCallback.filter(F.action == "create"))
async def start_task_creation(
    callback: CallbackQuery,
    callback_data: AdvertiseCallback,
    state: FSMContext,
    user: User
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    from app.bot.utils.messages import can_user_create_task, validate_reward_amount
    
    can_create, reason = can_user_create_task(user)
    if not can_create:
        await callback.answer(f"‚ùå {reason}", show_alert=True)
        return
    
    task_type = callback_data.task_type
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    await state.set_state(TaskCreationStates.entering_title)
    await state.update_data(task_type=task_type)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    type_names = {
        "channel_subscription": "üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª",
        "group_join": "üë• –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É",
        "post_view": "üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞",
        "post_reaction": "üëç –†–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Å—Ç",
        "bot_interaction": "ü§ñ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"
    }
    
    type_name = type_names.get(task_type, "–ó–∞–¥–∞–Ω–∏–µ")
    
    text = f"""üìù <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

üéØ <b>–¢–∏–ø:</b> {type_name}

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Å—É—Ç—å –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    from app.bot.keyboards.main_menu import get_cancel_keyboard
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard())
    await callback.answer()

@router.message(TaskCreationStates.entering_title)
async def process_task_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    from app.bot.utils.messages import validate_task_title
    
    title = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    is_valid, error = validate_task_title(title)
    if not is_valid:
        await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–∏—Å–∞–Ω–∏—é
    await state.update_data(title=title)
    await state.set_state(TaskCreationStates.entering_description)
    
    text = f"""üìù <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}

–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(TaskCreationStates.entering_description)
async def process_task_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ URL
    await state.update_data(description=description)
    await state.set_state(TaskCreationStates.entering_url)
    
    data = await state.get_data()
    task_type = data["task_type"]
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π
    url_instructions = {
        "channel_subscription": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: @channel –∏–ª–∏ https://t.me/channel):",
        "group_join": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: @group –∏–ª–∏ https://t.me/group):",
        "post_view": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/channel/123):",
        "post_reaction": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏:",
        "bot_interaction": "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @bot –∏–ª–∏ https://t.me/bot):"
    }
    
    instruction = url_instructions.get(task_type, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:")
    
    text = f"""üìù <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description[:50]}...

{instruction}

üí° <b>–§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</b>
‚Ä¢ @username
‚Ä¢ https://t.me/username
‚Ä¢ https://t.me/username/123 (–¥–ª—è –ø–æ—Å—Ç–æ–≤)

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(TaskCreationStates.entering_url)
async def process_task_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∑–∞–¥–∞–Ω–∏—è"""
    from app.bot.utils.messages import validate_url
    
    url = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not validate_url(url):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞–≥—Ä–∞–¥–µ
    await state.update_data(target_url=url)
    await state.set_state(TaskCreationStates.entering_reward)
    
    data = await state.get_data()
    
    text = f"""üìù <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'][:50]}...
‚úÖ <b>–°—Å—ã–ª–∫–∞:</b> {url}

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤ GRAM):

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 50 GRAM
‚Ä¢ –ß–µ–º –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥–∞, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±—é–¥–∂–µ—Ç–∞

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(TaskCreationStates.entering_reward)
async def process_task_reward(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    from decimal import Decimal, InvalidOperation
    from app.bot.utils.messages import validate_reward_amount
    
    try:
        reward = Decimal(message.text.strip())
    except (InvalidOperation, ValueError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥—ã
    is_valid, error = validate_reward_amount(reward, user.level)
    if not is_valid:
        await message.answer(f"‚ùå {error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    await state.update_data(reward_amount=reward)
    await state.set_state(TaskCreationStates.entering_quantity)
    
    data = await state.get_data()
    
    text = f"""üìù <b>–°–û–ó–î–ê–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø</b>

‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data['title']}
‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data['description'][:50]}...
‚úÖ <b>–°—Å—ã–ª–∫–∞:</b> {data['target_url']}
‚úÖ <b>–ù–∞–≥—Ä–∞–¥–∞:</b> {reward:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 10,000 –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–≤–æ–π –±—é–¥–∂–µ—Ç

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(TaskCreationStates.entering_quantity)
async def process_task_quantity(message: Message, state: FSMContext, user: User, task_service: TaskService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π"""
    try:
        quantity = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if quantity < 1 or quantity > 10000:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10,000\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç
    data = await state.get_data()
    reward = data["reward_amount"]
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –±—é–¥–∂–µ—Ç
    user_config = user.get_level_config()
    commission_rate = user_config["commission_rate"]
    
    total_reward = reward * quantity
    commission = total_reward * commission_rate
    total_budget = total_reward + commission
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.available_balance < total_budget:
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n"
            f"üí∞ –¢—Ä–µ–±—É–µ—Ç—Å—è: {total_budget:,.0f} GRAM\n"
            f"üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM\n\n"
            f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞–Ω–∏—è."
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await state.update_data(target_executions=quantity)
    await state.set_state(TaskCreationStates.confirmation)
    
    text = f"""‚úÖ <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø</b>

üìã <b>–ó–ê–î–ê–ù–ò–ï:</b>
‚îú –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}
‚îú –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}
‚îú –°—Å—ã–ª–∫–∞: {data['target_url']}
‚îú –ù–∞–≥—Ä–∞–¥–∞: {reward:,.0f} GRAM
‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}

üí∞ <b>–ë–Æ–î–ñ–ï–¢:</b>
‚îú –ù–∞–≥—Ä–∞–¥—ã: {total_reward:,.0f} GRAM
‚îú –ö–æ–º–∏—Å—Å–∏—è ({commission_rate*100:.0f}%): {commission:,.0f} GRAM
‚îî –ò—Ç–æ–≥–æ: {total_budget:,.0f} GRAM

üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.balance:,.0f} GRAM
üí≥ <b>–û—Å—Ç–∞–Ω–µ—Ç—Å—è:</b> {user.balance - total_budget:,.0f} GRAM"""
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
            callback_data="create_task_confirm"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel"
        )
    )
    
    await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data == "create_task_confirm")
async def create_task_confirm(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    task_service: TaskService
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    task = await task_service.create_task(
        author_id=user.telegram_id,
        task_type=TaskType(data["task_type"]),
        title=data["title"],
        description=data["description"],
        target_url=data["target_url"],
        reward_amount=data["reward_amount"],
        target_executions=data["target_executions"]
    )
    
    if task:
        text = f"""üéâ <b>–ó–ê–î–ê–ù–ò–ï –°–û–ó–î–ê–ù–û!</b>

üéØ {task.title}
üí∞ {task.reward_amount:,.0f} GRAM –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
üë• –¶–µ–ª—å: {task.target_executions} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π

üìä ID –∑–∞–¥–∞–Ω–∏—è: #{task.id}
‚úÖ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–æ–µ
üöÄ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!

üí° –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ "üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å" ‚Üí "üéØ –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è" """
        
        from app.bot.keyboards.main_menu import get_main_menu_keyboard
        
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(user)
        )
        await callback.answer("üéâ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", show_alert=True)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()