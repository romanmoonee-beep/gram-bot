from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from app.services.user_service import UserService
from app.bot.keyboards.main_menu import MainMenuCallback, get_back_to_menu_keyboard
from app.bot.keyboards.profile import get_profile_keyboard, ProfileCallback, get_deposit_keyboard
from app.bot.utils.messages import get_profile_text, get_balance_details_text, get_deposit_text

router = Router()

@router.callback_query(MainMenuCallback.filter(F.action == "profile"))
@router.message(Command("profile"))
async def show_profile(
    update: CallbackQuery | Message,
    user: User
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    profile_text = get_profile_text(user)
    keyboard = get_profile_keyboard(user)
    
    if isinstance(update, CallbackQuery):
        await update.message.edit_text(profile_text, reply_markup=keyboard)
        await update.answer()
    else:
        await update.answer(profile_text, reply_markup=keyboard)

@router.callback_query(ProfileCallback.filter(F.action == "balance"))
async def show_balance_info(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
    balance_text = get_balance_details_text(user)
    
    await callback.message.edit_text(
        balance_text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "stats"))
async def show_detailed_stats(callback: CallbackQuery, user: User, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await user_service.get_user_stats(user.telegram_id)
    
    stats_text = f"""üìä <b>–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>

üë§ <b>–ü–†–û–§–ò–õ–¨:</b>
‚îú ID: <code>{user.telegram_id}</code>
‚îú Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚îú –£—Ä–æ–≤–µ–Ω—å: {user.get_level_config()['name']}
‚îî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}

üíº <b>–ê–ö–¢–ò–í–ù–û–°–¢–¨:</b>
‚îú –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.tasks_completed}
‚îú –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {user.tasks_created}
‚îú –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.total_referrals}
‚îî Premium —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.premium_referrals}

üí∞ <b>–î–û–•–û–î–´:</b>
‚îú –û—Ç –∑–∞–¥–∞–Ω–∏–π: {user.total_earned:,.0f} GRAM
‚îú –û—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user.referral_earnings:,.0f} GRAM
‚îî –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned + user.referral_earnings:,.0f} GRAM

üìä <b>–¢–†–ê–ù–ó–ê–ö–¶–ò–ò:</b>
‚îú –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {stats['total_transactions']}
‚îú –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_income']:,.0f} GRAM
‚îî –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {stats['total_spending']:,.0f} GRAM

‚öôÔ∏è <b>–ù–ê–°–¢–†–û–ô–ö–ò –£–†–û–í–ù–Ø:</b>
‚îú –ö–æ–º–∏—Å—Å–∏—è: {user.get_level_config()['commission_rate']*100:.0f}%
‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥: x{user.get_level_config()['task_multiplier']}
‚îî –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {user.get_level_config()['referral_bonus']:,.0f} GRAM"""
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "deposit"))
async def show_deposit_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    text = """üí≥ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Telegram Stars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

‚≠ê <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Stars:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ Telegram
‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã

üí° <i>–ß–µ–º –±–æ–ª—å—à–µ –ø–∞–∫–µ—Ç, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ –∫—É—Ä—Å!</i>"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_deposit_keyboard()
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "my_tasks"))
async def show_my_tasks(callback: CallbackQuery, user: User, task_service):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞–Ω–∏—è"""
    from app.services.task_service import TaskService
    
    task_service = TaskService()
    tasks = await task_service.get_user_tasks(user.telegram_id, limit=10)
    
    if not tasks:
        text = """üéØ <b>–ú–û–ò –ó–ê–î–ê–ù–ò–Ø</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"""
    else:
        from app.bot.utils.messages import get_my_tasks_text
        text = get_my_tasks_text(tasks)
    
    from app.bot.keyboards.advertise import get_my_tasks_keyboard
    
    await callback.message.edit_text(
        text,
        reply_markup=get_my_tasks_keyboard(tasks)
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "executed_tasks"))
async def show_executed_tasks(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    from app.services.task_service import TaskService
    
    task_service = TaskService()
    executions = await task_service.get_user_executions(user.telegram_id, limit=10)
    
    if not executions:
        text = """üíº <b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ù–ò–Ø</b>

üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –∑–∞–¥–∞–Ω–∏—è.

–ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:
‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!"""
    else:
        text = f"""üíº <b>–í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ù–ò–Ø</b>

üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {len(executions)}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {sum(ex.reward_amount for ex in executions):,.0f} GRAM

üïê <b>–ü–û–°–õ–ï–î–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–ò–Ø:</b>"""
        
        for execution in executions[:5]:
            status_emoji = "‚úÖ" if execution.status.value == "completed" else "‚è≥"
            date = execution.created_at.strftime('%d.%m %H:%M')
            text += f"\n{status_emoji} {execution.reward_amount:,.0f} GRAM | {date}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "referrals"))
async def show_referrals(callback: CallbackQuery, user: User, user_service: UserService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    referrals = await user_service.get_user_referrals(user.telegram_id, limit=10)
    
    if not referrals:
        text = f"""üë• <b>–ú–û–ò –†–ï–§–ï–†–ê–õ–´</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
<code>https://t.me/{settings.BOT_USERNAME}?start={user.telegram_id}</code>

üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {user.get_level_config()['referral_bonus']:,.0f} GRAM"""
    else:
        text = f"""üë• <b>–ú–û–ò –†–ï–§–ï–†–ê–õ–´</b>

üìä –í—Å–µ–≥–æ: {user.total_referrals} | Premium: {user.premium_referrals}
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.referral_earnings:,.0f} GRAM

üë§ <b>–ü–û–°–õ–ï–î–ù–ò–ï –†–ï–§–ï–†–ê–õ–´:</b>"""
        
        for referral in referrals[:5]:
            level_emoji = {"bronze": "ü•â", "silver": "ü•à", "gold": "ü•á", "premium": "üíé"}.get(referral.level, "‚ùì")
            date = referral.created_at.strftime('%d.%m.%Y')
            username = referral.username or f"ID{referral.telegram_id}"
            text += f"\n{level_emoji} @{username} | {date}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(ProfileCallback.filter(F.action == "transactions"))
async def show_transactions(callback: CallbackQuery, user: User, transaction_service):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    from app.services.transaction_service import TransactionService
    
    transaction_service = TransactionService()
    transactions = await transaction_service.get_user_transactions(user.telegram_id, limit=10)
    
    if not transactions:
        text = """üìú <b>–ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>

üì≠ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.

–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ:
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    else:
        text = f"""üìú <b>–ò–°–¢–û–†–ò–Ø –¢–†–ê–ù–ó–ê–ö–¶–ò–ô</b>

üìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(transactions)}

üïê <b>–ü–û–°–õ–ï–î–ù–ò–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:</b>"""
        
        for tx in transactions[:8]:
            amount_text = f"+{tx.amount:,.0f}" if tx.amount > 0 else f"{tx.amount:,.0f}"
            date = tx.created_at.strftime('%d.%m %H:%M')
            
            # –ò–∫–æ–Ω–∫–∏ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            type_icons = {
                "task_reward": "üéØ",
                "referral_bonus": "üë•",
                "deposit_stars": "‚≠ê",
                "task_creation": "üì¢"
            }
            icon = type_icons.get(tx.type.value, "üí∞")
            
            text += f"\n{icon} {amount_text} GRAM | {date}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_menu_keyboard()
    )
    await callback.answer()