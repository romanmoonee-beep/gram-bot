from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from decimal import Decimal

from app.database.models.user import User
from app.database.models.check import CheckType
from app.services.check_service import CheckService
from app.bot.keyboards.checks import (
    CheckCallback, get_checks_menu_keyboard, get_check_type_keyboard,
    get_my_checks_keyboard, get_check_management_keyboard,
    get_check_activation_keyboard, get_activated_checks_keyboard,
    get_cancel_keyboard
)
from app.bot.keyboards.main_menu import get_main_menu_keyboard
from app.bot.states.check_creation import CheckCreationStates
from app.bot.utils.messages import get_error_message, get_success_message

router = Router()

@router.message(Command("checks"))
async def cmd_checks(message: Message, user: User):
    """–ö–æ–º–∞–Ω–¥–∞ /checks"""
    text = """üí≥ <b>–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í</b>

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} GRAM

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ß–ï–ö–û–í:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã
‚Ä¢ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    await message.answer(
        text,
        reply_markup=get_checks_menu_keyboard()
    )

@router.callback_query(CheckCallback.filter(F.action == "cancel"))
async def cancel_check(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    user: User,
    check_service: CheckService
):
    """–û—Ç–º–µ–Ω–∏—Ç—å —á–µ–∫"""
    check_id = callback_data.check_id
    
    success = await check_service.cancel_check(check_id, user.telegram_id)
    
    if success:
        text = """‚úÖ <b>–ß–ï–ö –û–¢–ú–ï–ù–ï–ù</b>

–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.
üí∞ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."""
        
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(user)
        )
        await callback.answer("‚úÖ –ß–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —á–µ–∫", show_alert=True)

@router.callback_query(CheckCallback.filter(F.action == "analytics"))
async def show_check_analytics(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    check_service: CheckService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ–∫–∞"""
    analytics = await check_service.get_check_analytics(callback_data.check_id)
    
    if not analytics:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", show_alert=True)
        return
    
    check = analytics['check']
    
    text = f"""üìä <b>–ê–ù–ê–õ–ò–¢–ò–ö–ê –ß–ï–ö–ê</b>

üí≥ <b>–ß–µ–∫:</b> #{check.check_code}
üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check.created_at.strftime('%d.%m.%Y %H:%M')}

üìà <b>–ê–ö–¢–ò–í–ù–û–°–¢–ò:</b>
‚îú –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {analytics['total_activations']}
‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: {analytics['completion_percentage']:.1f}%
‚îú –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {analytics['total_distributed']:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {check.remaining_amount:,.0f} GRAM

‚è±Ô∏è <b>–ê–ö–¢–ò–í–ê–¶–ò–ò –ü–û –í–†–ï–ú–ï–ù–ò:</b>"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    if analytics['activations']:
        text += "\n\nüïê <b>–ü–û–°–õ–ï–î–ù–ò–ï –ê–ö–¢–ò–í–ê–¶–ò–ò:</b>"
        for activation in analytics['activations'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            time_str = activation.activated_at.strftime('%d.%m %H:%M')
            text += f"\n‚îú {activation.amount_received:,.0f} GRAM | {time_str}"
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–∫—É",
            callback_data=CheckCallback(action="manage", check_id=check.id).pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "activated"))
async def show_activated_checks(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    user: User,
    check_service: CheckService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ–∫–∏"""
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    activations = await check_service.get_user_activations(
        user.telegram_id,
        limit=limit + 1,
        offset=offset
    )
    
    has_next = len(activations) > limit
    if has_next:
        activations = activations[:limit]
    
    if not activations:
        text = """üí∞ <b>–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ù–´–ï –ß–ï–ö–ò</b>

üì≠ –í—ã –ø–æ–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–µ–∫–∞.

–ù–∞–π–¥–∏—Ç–µ —á–µ–∫–∏:
‚Ä¢ –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –¥—Ä—É–∑–µ–π
‚Ä¢ –í –∫–∞–Ω–∞–ª–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /check –ö–û–î"""
    else:
        total_received = sum(a.amount_received for a in activations)
        
        text = f"""üí∞ <b>–ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ù–´–ï –ß–ï–ö–ò</b>

üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {len(activations)}
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {total_received:,.0f} GRAM
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

üïê <b>–ü–û–°–õ–ï–î–ù–ò–ï –ê–ö–¢–ò–í–ê–¶–ò–ò:</b>"""
        
        for activation in activations:
            time_str = activation.activated_at.strftime('%d.%m %H:%M')
            text += f"\n‚îú {activation.amount_received:,.0f} GRAM | {time_str}"
    
    keyboard = get_activated_checks_keyboard(activations, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "copy_code"))
async def copy_check_code(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    check_service: CheckService
):
    """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —á–µ–∫–∞"""
    check_id = callback_data.check_id
    
    analytics = await check_service.get_check_analytics(check_id)
    if not analytics:
        await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    check = analytics['check']
    
    text = f"""üìã <b>–ö–û–î –ß–ï–ö–ê</b>

–ö–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:
<code>{check.check_code}</code>

üí° <b>–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:</b>
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤—ã—à–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º –≤ –ª—é–±–æ–º —á–∞—Ç–µ
‚Ä¢ –û–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç: /check {check.check_code}"""
    
    if check.password:
        text += f"\n\nüîí –ü–∞—Ä–æ–ª—å: <code>{check.password}</code>"
        text += f"\n–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: <code>/check {check.check_code} {check.password}</code>"
    
    await callback.answer("üìã –ö–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!", show_alert=True)
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–∫—É",
            callback_data=CheckCallback(action="manage", check_id=check.id).pack()
        )
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–æ–≤
@router.message(F.text.regexp(r'^[A-Z0-9]{8}Callback.filter(F.action == "menu"))
async def show_checks_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —á–µ–∫–æ–≤"""
    text = f"""üí≥ <b>–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í</b>

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} GRAM

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ß–ï–ö–û–í:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã
‚Ä¢ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_checks_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create_menu"))
async def show_create_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    text = """‚ûï <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:

üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>
‚Ä¢ –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üë• <b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>
‚Ä¢ –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑–¥–∞—á

üéÅ <b>–†–æ–∑—ã–≥—Ä—ã—à</b>
‚Ä¢ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_check_type_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create"))
async def start_check_creation(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    state: FSMContext,
    user: User
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    check_type = callback_data.check_type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.available_balance < 10:  # –ú–∏–Ω–∏–º—É–º 10 GRAM
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 10 GRAM)", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CheckCreationStates.entering_amount)
    await state.update_data(check_type=check_type)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    type_names = {
        "personal": "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫",
        "multi": "üë• –ú—É–ª—å—Ç–∏-—á–µ–∫",
        "giveaway": "üéÅ –†–æ–∑—ã–≥—Ä—ã—à"
    }
    
    type_name = type_names.get(check_type, "–ß–µ–∫")
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

üéØ <b>–¢–∏–ø:</b> {type_name}

–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É —á–µ–∫–∞ –≤ GRAM:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 10 GRAM
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard())
    await callback.answer()

@router.message(CheckCreationStates.entering_amount)
async def process_check_amount(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —á–µ–∫–∞"""
    try:
        amount = Decimal(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount < 10:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount > user.available_balance:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    await state.update_data(amount=amount)
    await state.set_state(CheckCreationStates.entering_activations)
    
    data = await state.get_data()
    check_type = data["check_type"]
    
    if check_type == "personal":
        # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.update_data(max_activations=1)
        await state.set_state(CheckCreationStates.entering_comment)
        
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û –ß–ï–ö–ê</b>

‚úÖ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> 1

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
‚Ä¢ "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)
    else:
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π):

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 2 –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1000 –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç: {amount:,.0f} √∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)

@router.message(CheckCreationStates.entering_activations)
async def process_check_activations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
    try:
        activations = int(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations < 2:
        await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 2\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations > 1000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 1000\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    amount = data["amount"]
    amount_per_activation = amount / activations
    
    if amount_per_activation < 1:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n–ü—Ä–∏ {activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç {amount_per_activation:.2f} GRAM\n–ú–∏–Ω–∏–º—É–º –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: 1 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(max_activations=activations)
    await state.set_state(CheckCreationStates.entering_comment)
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {activations}
‚úÖ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–†–∞–∑–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
‚Ä¢ "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_comment)
async def process_check_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ–∫–∞"""
    comment = message.text.strip()
    
    if comment == "-":
        comment = None
    elif len(comment) > 200:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(description=comment)
    await state.set_state(CheckCreationStates.entering_password)
    
    text = """üîí <b>–ü–ê–†–û–õ–¨ –î–õ–Ø –ß–ï–ö–ê</b>

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã —á–µ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å:</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ª—é–¥—è–º

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_password)
async def process_check_password(message: Message, state: FSMContext, user: User, check_service: CheckService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    password = message.text.strip()
    
    if password == "-":
        password = None
    elif len(password) > 50:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    check_type = CheckType(data["check_type"])
    amount = data["amount"]
    max_activations = data["max_activations"]
    description = data.get("description")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    check = await check_service.create_check(
        creator_id=user.telegram_id,
        check_type=check_type,
        total_amount=amount,
        max_activations=max_activations,
        description=description,
        password=password,
        expires_in_hours=24 * 7  # 7 –¥–Ω–µ–π
    )
    
    if check:
        amount_per_activation = amount / max_activations
        
        text = f"""‚úÖ <b>–ß–ï–ö –°–û–ó–î–ê–ù!</b>

üí≥ <b>–ö–æ–¥ —á–µ–∫–∞:</b> <code>{check.check_code}</code>
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {max_activations}
üéÅ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

üîó <b>–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" 
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: <code>/check {check.check_code}</code>

‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 7 –¥–Ω–µ–π"""
        
        if password:
            text += f"\nüîí <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>"
        
        if description:
            text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {description}"
        
        await message.answer(
            text,
            reply_markup=get_check_management_keyboard(check)
        )
        
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(CheckCallback.filter(F.action == "my_checks"))
async def show_my_checks(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    user: User,
    check_service: CheckService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–µ–∫–∏"""
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    checks = await check_service.get_user_checks(
        user.telegram_id,
        limit=limit + 1,
        offset=offset
    )
    
    has_next = len(checks) > limit
    if has_next:
        checks = checks[:limit]
    
    if not checks:
        text = """üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–∫:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"""
    else:
        text = f"""üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üìä –í—Å–µ–≥–æ: {len(checks)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
    
    keyboard = get_my_checks_keyboard(checks, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "manage"))
async def manage_check(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    check_service: CheckService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–æ–º"""
    check_id = callback_data.check_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ–∫–∞
    analytics = await check_service.get_check_analytics(check_id)
    
    if not analytics:
        await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    check = analytics['check']
    
    # –°—Ç–∞—Ç—É—Å —á–µ–∫–∞
    status_icons = {
        "active": "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π",
        "expired": "‚è∞ –ò—Å—Ç–µ–∫",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }
    
    status_text = status_icons.get(check.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""üí≥ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–û–ú</b>

üÜî <b>–ö–æ–¥:</b> <code>{check.check_code}</code>
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üí∞ <b>–°—É–º–º–∞:</b> {check.amount_per_activation:,.0f} GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {check.current_activations}/{check.max_activations}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {analytics['completion_percentage']:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {check.remaining_activations}

üí≥ <b>–§–ò–ù–ê–ù–°–´:</b>
‚îú –û–±—â–∞—è —Å—É–º–º–∞: {check.total_amount:,.0f} GRAM
‚îú –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {analytics['total_distributed']:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {check.remaining_amount:,.0f} GRAM

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check.created_at.strftime('%d.%m.%Y %H:%M')}"""
    
    if check.expires_at:
        text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {check.expires_at.strftime('%d.%m.%Y %H:%M')}"
    
    if check.description:
        text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {check.description}"
    
    keyboard = get_check_management_keyboard(check)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "activate"))
async def show_activate_form(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"""
    text = """üé´ <b>–ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ï–ö–ê</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —á–µ–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:

üí° <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b>
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —á–µ–∫–∞
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/check –ö–û–î</code>
‚Ä¢ –ï—Å–ª–∏ —á–µ–∫ —Å –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ: <code>–ö–û–î –ø–∞—Ä–æ–ª—å</code>

üîç <b>–ü—Ä–∏–º–µ—Ä:</b>
‚Ä¢ <code>AB12CD34</code>
‚Ä¢ <code>AB12CD34 mypassword</code>

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_check_activation_keyboard())
    await callback.answer()

@router.message(Command("check"))
async def cmd_activate_check(message: Message, user: User, check_service: CheckService):
    """–ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —á–µ–∫–∞: /check –ö–û–î")
        return
    
    check_code = args[1].upper()
    password = args[2] if len(args) > 2 else None
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    success, message_text, amount = await check_service.activate_check(
        check_code, user.telegram_id, password
    )
    
    if success:
        text = f"""üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{amount:,.0f} GRAM</b>
üÜî –ö–æ–¥: <code>{check_code}</code>

üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"""
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(user))
    else:
        await message.answer(f"{message_text}")

@router.callback_query(Check))
async def activate_check_by_text(message: Message, user: User, check_service: CheckService):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–∫–æ–¥ –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤)"""
    check_code = message.text.upper()
    
    success, message_text, amount = await check_service.activate_check(
        check_code, user.telegram_id
    )
    
    if success:
        text = f"""üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{amount:,.0f} GRAM</b>
üÜî –ö–æ–¥: <code>{check_code}</code>

üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"""
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(user))
    else:
        await message.answer(f"{message_text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º
@router.message(F.text.regexp(r'^[A-Z0-9]{8}\s+\S+Callback.filter(F.action == "menu"))
async def show_checks_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —á–µ–∫–æ–≤"""
    text = f"""üí≥ <b>–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í</b>

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} GRAM

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ß–ï–ö–û–í:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã
‚Ä¢ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_checks_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create_menu"))
async def show_create_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    text = """‚ûï <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:

üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>
‚Ä¢ –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üë• <b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>
‚Ä¢ –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑–¥–∞—á

üéÅ <b>–†–æ–∑—ã–≥—Ä—ã—à</b>
‚Ä¢ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_check_type_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create"))
async def start_check_creation(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    state: FSMContext,
    user: User
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    check_type = callback_data.check_type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.available_balance < 10:  # –ú–∏–Ω–∏–º—É–º 10 GRAM
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 10 GRAM)", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CheckCreationStates.entering_amount)
    await state.update_data(check_type=check_type)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    type_names = {
        "personal": "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫",
        "multi": "üë• –ú—É–ª—å—Ç–∏-—á–µ–∫",
        "giveaway": "üéÅ –†–æ–∑—ã–≥—Ä—ã—à"
    }
    
    type_name = type_names.get(check_type, "–ß–µ–∫")
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

üéØ <b>–¢–∏–ø:</b> {type_name}

–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É —á–µ–∫–∞ –≤ GRAM:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 10 GRAM
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard())
    await callback.answer()

@router.message(CheckCreationStates.entering_amount)
async def process_check_amount(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —á–µ–∫–∞"""
    try:
        amount = Decimal(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount < 10:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount > user.available_balance:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    await state.update_data(amount=amount)
    await state.set_state(CheckCreationStates.entering_activations)
    
    data = await state.get_data()
    check_type = data["check_type"]
    
    if check_type == "personal":
        # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.update_data(max_activations=1)
        await state.set_state(CheckCreationStates.entering_comment)
        
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û –ß–ï–ö–ê</b>

‚úÖ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> 1

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
‚Ä¢ "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)
    else:
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π):

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 2 –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1000 –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç: {amount:,.0f} √∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)

@router.message(CheckCreationStates.entering_activations)
async def process_check_activations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
    try:
        activations = int(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations < 2:
        await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 2\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations > 1000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 1000\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    amount = data["amount"]
    amount_per_activation = amount / activations
    
    if amount_per_activation < 1:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n–ü—Ä–∏ {activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç {amount_per_activation:.2f} GRAM\n–ú–∏–Ω–∏–º—É–º –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: 1 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(max_activations=activations)
    await state.set_state(CheckCreationStates.entering_comment)
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {activations}
‚úÖ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–†–∞–∑–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
‚Ä¢ "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_comment)
async def process_check_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ–∫–∞"""
    comment = message.text.strip()
    
    if comment == "-":
        comment = None
    elif len(comment) > 200:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(description=comment)
    await state.set_state(CheckCreationStates.entering_password)
    
    text = """üîí <b>–ü–ê–†–û–õ–¨ –î–õ–Ø –ß–ï–ö–ê</b>

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã —á–µ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å:</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ª—é–¥—è–º

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_password)
async def process_check_password(message: Message, state: FSMContext, user: User, check_service: CheckService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    password = message.text.strip()
    
    if password == "-":
        password = None
    elif len(password) > 50:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    check_type = CheckType(data["check_type"])
    amount = data["amount"]
    max_activations = data["max_activations"]
    description = data.get("description")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    check = await check_service.create_check(
        creator_id=user.telegram_id,
        check_type=check_type,
        total_amount=amount,
        max_activations=max_activations,
        description=description,
        password=password,
        expires_in_hours=24 * 7  # 7 –¥–Ω–µ–π
    )
    
    if check:
        amount_per_activation = amount / max_activations
        
        text = f"""‚úÖ <b>–ß–ï–ö –°–û–ó–î–ê–ù!</b>

üí≥ <b>–ö–æ–¥ —á–µ–∫–∞:</b> <code>{check.check_code}</code>
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {max_activations}
üéÅ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

üîó <b>–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" 
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: <code>/check {check.check_code}</code>

‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 7 –¥–Ω–µ–π"""
        
        if password:
            text += f"\nüîí <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>"
        
        if description:
            text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {description}"
        
        await message.answer(
            text,
            reply_markup=get_check_management_keyboard(check)
        )
        
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(CheckCallback.filter(F.action == "my_checks"))
async def show_my_checks(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    user: User,
    check_service: CheckService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–µ–∫–∏"""
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    checks = await check_service.get_user_checks(
        user.telegram_id,
        limit=limit + 1,
        offset=offset
    )
    
    has_next = len(checks) > limit
    if has_next:
        checks = checks[:limit]
    
    if not checks:
        text = """üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–∫:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"""
    else:
        text = f"""üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üìä –í—Å–µ–≥–æ: {len(checks)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
    
    keyboard = get_my_checks_keyboard(checks, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "manage"))
async def manage_check(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    check_service: CheckService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–æ–º"""
    check_id = callback_data.check_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ–∫–∞
    analytics = await check_service.get_check_analytics(check_id)
    
    if not analytics:
        await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    check = analytics['check']
    
    # –°—Ç–∞—Ç—É—Å —á–µ–∫–∞
    status_icons = {
        "active": "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π",
        "expired": "‚è∞ –ò—Å—Ç–µ–∫",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }
    
    status_text = status_icons.get(check.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""üí≥ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–û–ú</b>

üÜî <b>–ö–æ–¥:</b> <code>{check.check_code}</code>
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üí∞ <b>–°—É–º–º–∞:</b> {check.amount_per_activation:,.0f} GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {check.current_activations}/{check.max_activations}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {analytics['completion_percentage']:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {check.remaining_activations}

üí≥ <b>–§–ò–ù–ê–ù–°–´:</b>
‚îú –û–±—â–∞—è —Å—É–º–º–∞: {check.total_amount:,.0f} GRAM
‚îú –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {analytics['total_distributed']:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {check.remaining_amount:,.0f} GRAM

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check.created_at.strftime('%d.%m.%Y %H:%M')}"""
    
    if check.expires_at:
        text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {check.expires_at.strftime('%d.%m.%Y %H:%M')}"
    
    if check.description:
        text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {check.description}"
    
    keyboard = get_check_management_keyboard(check)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "activate"))
async def show_activate_form(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"""
    text = """üé´ <b>–ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ï–ö–ê</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —á–µ–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:

üí° <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b>
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —á–µ–∫–∞
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/check –ö–û–î</code>
‚Ä¢ –ï—Å–ª–∏ —á–µ–∫ —Å –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ: <code>–ö–û–î –ø–∞—Ä–æ–ª—å</code>

üîç <b>–ü—Ä–∏–º–µ—Ä:</b>
‚Ä¢ <code>AB12CD34</code>
‚Ä¢ <code>AB12CD34 mypassword</code>

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_check_activation_keyboard())
    await callback.answer()

@router.message(Command("check"))
async def cmd_activate_check(message: Message, user: User, check_service: CheckService):
    """–ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —á–µ–∫–∞: /check –ö–û–î")
        return
    
    check_code = args[1].upper()
    password = args[2] if len(args) > 2 else None
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    success, message_text, amount = await check_service.activate_check(
        check_code, user.telegram_id, password
    )
    
    if success:
        text = f"""üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{amount:,.0f} GRAM</b>
üÜî –ö–æ–¥: <code>{check_code}</code>

üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"""
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(user))
    else:
        await message.answer(f"{message_text}")

@router.callback_query(Check))
async def activate_check_with_password(message: Message, user: User, check_service: CheckService):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ —Å –ø–∞—Ä–æ–ª–µ–º"""
    parts = message.text.split()
    check_code = parts[0].upper()
    password = parts[1]
    
    success, message_text, amount = await check_service.activate_check(
        check_code, user.telegram_id, password
    )
    
    if success:
        text = f"""üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{amount:,.0f} GRAM</b>
üÜî –ö–æ–¥: <code>{check_code}</code>

üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"""
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(user))
    else:
        await message.answer(f"{message_text}")Callback.filter(F.action == "menu"))
async def show_checks_menu(callback: CallbackQuery, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —á–µ–∫–æ–≤"""
    text = f"""üí≥ <b>–°–ò–°–¢–ï–ú–ê –ß–ï–ö–û–í</b>

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ GRAM –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö Telegram.

üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance:,.0f} GRAM

üéØ <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ß–ï–ö–û–í:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª—é–±–æ–π —á–∞—Ç/–∫–∞–Ω–∞–ª
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –∑–∞—â–∏—Ç—ã
‚Ä¢ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_checks_menu_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create_menu"))
async def show_create_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞"""
    text = """‚ûï <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞:

üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫</b>
‚Ä¢ –î–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
‚Ä¢ –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å

üë• <b>–ú—É–ª—å—Ç–∏-—á–µ–∫</b>
‚Ä¢ –î–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
‚Ä¢ –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑–¥–∞—á

üéÅ <b>–†–æ–∑—ã–≥—Ä—ã—à</b>
‚Ä¢ –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
‚Ä¢ –†–∞–∑–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    await callback.message.edit_text(
        text,
        reply_markup=get_check_type_keyboard()
    )
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "create"))
async def start_check_creation(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    state: FSMContext,
    user: User
):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    check_type = callback_data.check_type
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.available_balance < 10:  # –ú–∏–Ω–∏–º—É–º 10 GRAM
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 10 GRAM)", show_alert=True)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(CheckCreationStates.entering_amount)
    await state.update_data(check_type=check_type)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
    type_names = {
        "personal": "üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —á–µ–∫",
        "multi": "üë• –ú—É–ª—å—Ç–∏-—á–µ–∫",
        "giveaway": "üéÅ –†–æ–∑—ã–≥—Ä—ã—à"
    }
    
    type_name = type_names.get(check_type, "–ß–µ–∫")
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ß–ï–ö–ê</b>

üéØ <b>–¢–∏–ø:</b> {type_name}

–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É —á–µ–∫–∞ –≤ GRAM:

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 10 GRAM
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_cancel_keyboard())
    await callback.answer()

@router.message(CheckCreationStates.entering_amount)
async def process_check_amount(message: Message, state: FSMContext, user: User):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —á–µ–∫–∞"""
    try:
        amount = Decimal(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount < 10:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if amount > user.available_balance:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {user.available_balance:,.0f} GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    await state.update_data(amount=amount)
    await state.set_state(CheckCreationStates.entering_activations)
    
    data = await state.get_data()
    check_type = data["check_type"]
    
    if check_type == "personal":
        # –î–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
        await state.update_data(max_activations=1)
        await state.set_state(CheckCreationStates.entering_comment)
        
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ì–û –ß–ï–ö–ê</b>

‚úÖ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</b> 1

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
‚Ä¢ "–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥—Ä—É–≥–∞"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)
    else:
        text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π (–ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π):

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
‚Ä¢ –ú–∏–Ω–∏–º—É–º: 2 –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 1000 –∞–∫—Ç–∏–≤–∞—Ü–∏–π
‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç: {amount:,.0f} √∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
        
        await message.answer(text)

@router.message(CheckCreationStates.entering_activations)
async def process_check_activations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π"""
    try:
        activations = int(message.text.strip())
    except (ValueError, TypeError):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations < 2:
        await message.answer("‚ùå –ú–∏–Ω–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 2\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if activations > 1000:
        await message.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–∞—Ü–∏–π: 1000\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    amount = data["amount"]
    amount_per_activation = amount / activations
    
    if amount_per_activation < 1:
        await message.answer(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n–ü—Ä–∏ {activations} –∞–∫—Ç–∏–≤–∞—Ü–∏—è—Ö –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç {amount_per_activation:.2f} GRAM\n–ú–∏–Ω–∏–º—É–º –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: 1 GRAM\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    await state.update_data(max_activations=activations)
    await state.set_state(CheckCreationStates.entering_comment)
    
    text = f"""üí≥ <b>–°–û–ó–î–ê–ù–ò–ï –ú–£–õ–¨–¢–ò-–ß–ï–ö–ê</b>

‚úÖ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {amount:,.0f} GRAM
‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {activations}
‚úÖ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ "–†–∞–∑–¥–∞—á–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!"
‚Ä¢ "–ë–æ–Ω—É—Å –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∫–∞–Ω–∞–ª–µ"
‚Ä¢ "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫"

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_comment)
async def process_check_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ–∫–∞"""
    comment = message.text.strip()
    
    if comment == "-":
        comment = None
    elif len(comment) > 200:
        await message.answer("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await state.update_data(description=comment)
    await state.set_state(CheckCreationStates.entering_password)
    
    text = """üîí <b>–ü–ê–†–û–õ–¨ –î–õ–Ø –ß–ï–ö–ê</b>

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã —á–µ–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):

üí° <b>–ó–∞—á–µ–º –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å:</b>
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –†–∞–∑–¥–∞—á–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ª—é–¥—è–º

‚è≠Ô∏è <i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-"</i>
‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await message.answer(text)

@router.message(CheckCreationStates.entering_password)
async def process_check_password(message: Message, state: FSMContext, user: User, check_service: CheckService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞"""
    password = message.text.strip()
    
    if password == "-":
        password = None
    elif len(password) > 50:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    check_type = CheckType(data["check_type"])
    amount = data["amount"]
    max_activations = data["max_activations"]
    description = data.get("description")
    
    # –°–æ–∑–¥–∞–µ–º —á–µ–∫
    check = await check_service.create_check(
        creator_id=user.telegram_id,
        check_type=check_type,
        total_amount=amount,
        max_activations=max_activations,
        description=description,
        password=password,
        expires_in_hours=24 * 7  # 7 –¥–Ω–µ–π
    )
    
    if check:
        amount_per_activation = amount / max_activations
        
        text = f"""‚úÖ <b>–ß–ï–ö –°–û–ó–î–ê–ù!</b>

üí≥ <b>–ö–æ–¥ —á–µ–∫–∞:</b> <code>{check.check_code}</code>
üí∞ <b>–°—É–º–º–∞:</b> {amount:,.0f} GRAM
üë• <b>–ê–∫—Ç–∏–≤–∞—Ü–∏–π:</b> {max_activations}
üéÅ <b>–ù–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é:</b> {amount_per_activation:,.0f} GRAM

üîó <b>–ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" 
‚Ä¢ –ê–∫—Ç–∏–≤–∞—Ü–∏—è: <code>/check {check.check_code}</code>

‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 7 –¥–Ω–µ–π"""
        
        if password:
            text += f"\nüîí <b>–ü–∞—Ä–æ–ª—å:</b> <code>{password}</code>"
        
        if description:
            text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {description}"
        
        await message.answer(
            text,
            reply_markup=get_check_management_keyboard(check)
        )
        
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

@router.callback_query(CheckCallback.filter(F.action == "my_checks"))
async def show_my_checks(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    user: User,
    check_service: CheckService
):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —á–µ–∫–∏"""
    page = callback_data.page
    limit = 10
    offset = (page - 1) * limit
    
    checks = await check_service.get_user_checks(
        user.telegram_id,
        limit=limit + 1,
        offset=offset
    )
    
    has_next = len(checks) > limit
    if has_next:
        checks = checks[:limit]
    
    if not checks:
        text = """üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤.

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–µ–∫:
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–µ–∫–∞
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!"""
    else:
        text = f"""üìã <b>–ú–û–ò –ß–ï–ö–ò</b>

üìä –í—Å–µ–≥–æ: {len(checks)} | –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page}

–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
    
    keyboard = get_my_checks_keyboard(checks, page, has_next)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "manage"))
async def manage_check(
    callback: CallbackQuery,
    callback_data: CheckCallback,
    check_service: CheckService
):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–æ–º"""
    check_id = callback_data.check_id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ–∫–∞
    analytics = await check_service.get_check_analytics(check_id)
    
    if not analytics:
        await callback.answer("‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    check = analytics['check']
    
    # –°—Ç–∞—Ç—É—Å —á–µ–∫–∞
    status_icons = {
        "active": "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π",
        "expired": "‚è∞ –ò—Å—Ç–µ–∫",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }
    
    status_text = status_icons.get(check.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    text = f"""üí≥ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ß–ï–ö–û–ú</b>

üÜî <b>–ö–æ–¥:</b> <code>{check.check_code}</code>
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}
üí∞ <b>–°—É–º–º–∞:</b> {check.amount_per_activation:,.0f} GRAM –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é

üìà <b>–ü–†–û–ì–†–ï–°–°:</b>
‚îú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {check.current_activations}/{check.max_activations}
‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {analytics['completion_percentage']:.1f}%
‚îî –û—Å—Ç–∞–ª–æ—Å—å: {check.remaining_activations}

üí≥ <b>–§–ò–ù–ê–ù–°–´:</b>
‚îú –û–±—â–∞—è —Å—É–º–º–∞: {check.total_amount:,.0f} GRAM
‚îú –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {analytics['total_distributed']:,.0f} GRAM
‚îî –û—Å—Ç–∞–µ—Ç—Å—è: {check.remaining_amount:,.0f} GRAM

üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> {check.created_at.strftime('%d.%m.%Y %H:%M')}"""
    
    if check.expires_at:
        text += f"\n‚è∞ <b>–ò—Å—Ç–µ–∫–∞–µ—Ç:</b> {check.expires_at.strftime('%d.%m.%Y %H:%M')}"
    
    if check.description:
        text += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {check.description}"
    
    keyboard = get_check_management_keyboard(check)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(CheckCallback.filter(F.action == "activate"))
async def show_activate_form(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–∞"""
    text = """üé´ <b>–ê–ö–¢–ò–í–ê–¶–ò–Ø –ß–ï–ö–ê</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —á–µ–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:

üí° <b>–ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å:</b>
‚Ä¢ –í–≤–µ–¥–∏—Ç–µ 8-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ —á–µ–∫–∞
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/check –ö–û–î</code>
‚Ä¢ –ï—Å–ª–∏ —á–µ–∫ —Å –ø–∞—Ä–æ–ª–µ–º, –≤–≤–µ–¥–∏—Ç–µ: <code>–ö–û–î –ø–∞—Ä–æ–ª—å</code>

üîç <b>–ü—Ä–∏–º–µ—Ä:</b>
‚Ä¢ <code>AB12CD34</code>
‚Ä¢ <code>AB12CD34 mypassword</code>

‚ùå <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel</i>"""
    
    await callback.message.edit_text(text, reply_markup=get_check_activation_keyboard())
    await callback.answer()

@router.message(Command("check"))
async def cmd_activate_check(message: Message, user: User, check_service: CheckService):
    """–ö–æ–º–∞–Ω–¥–∞ /check –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —á–µ–∫–∞: /check –ö–û–î")
        return
    
    check_code = args[1].upper()
    password = args[2] if len(args) > 2 else None
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
    success, message_text, amount = await check_service.activate_check(
        check_code, user.telegram_id, password
    )
    
    if success:
        text = f"""üéâ <b>–ß–ï–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: <b>{amount:,.0f} GRAM</b>
üÜî –ö–æ–¥: <code>{check_code}</code>

üí≥ –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!"""
        
        await message.answer(text, reply_markup=get_main_menu_keyboard(user))
    else:
        await message.answer(f"{message_text}")

@router.callback_query(Check
