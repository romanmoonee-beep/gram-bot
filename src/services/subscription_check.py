from __future__ import annotations

import secrets
import string
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional

import structlog
from sqlalchemy import select, func, and_, desc
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.database import get_session
from app.database.models.check import Check, CheckActivation, CheckType, CheckStatus
from app.database.models.user import User
from app.database.models.transaction import TransactionType
from app.services.user_service import UserService
from app.services.transaction_service import TransactionService
from app.config.settings import settings

logger = structlog.get_logger(__name__)

class CheckService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫–∞–º–∏"""
    
    def __init__(self):
        self.user_service = UserService()
        self.transaction_service = TransactionService()
    
    def _generate_check_code(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —á–µ–∫–∞"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ 8 —Å–∏–º–≤–æ–ª–æ–≤ (–±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
        alphabet = string.ascii_uppercase + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(8))
    
    async def create_check(
        self,
        creator_id: int,
        check_type: CheckType,
        total_amount: Decimal,
        max_activations: int = 1,
        title: str | None = None,
        description: str | None = None,
        password: str | None = None,
        required_subscription_channel: str | None = None,
        min_user_level: str | None = None,
        expires_in_hours: int | None = None,
        max_per_user: int = 1
    ) -> Check | None:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–µ–∫"""
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
            creator = await self.user_service.get_user(creator_id)
            if not creator:
                logger.error("‚ùå Creator not found", creator_id=creator_id)
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if creator.available_balance < total_amount:
                logger.warning(
                    "‚ùå Insufficient balance for check creation",
                    creator_id=creator_id,
                    required=float(total_amount),
                    available=float(creator.available_balance)
                )
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
            amount_per_activation = total_amount / max_activations
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            attempts = 0
            while attempts < 10:
                check_code = self._generate_check_code()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                existing = await session.execute(
                    select(Check).where(Check.check_code == check_code)
                )
                if not existing.scalar_one_or_none():
                    break
                    
                attempts += 1
            else:
                logger.error("‚ùå Failed to generate unique check code")
                return None
            
            # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —É —Å–æ–∑–¥–∞—Ç–µ–ª—è
            await self.user_service.freeze_balance(
                creator_id,
                total_amount,
                f"–°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–∞ #{check_code}"
            )
            
            # –°–æ–∑–¥–∞–µ–º —á–µ–∫
            expires_at = None
            if expires_in_hours:
                expires_at = datetime.utcnow() + timedelta(hours=expires_in_hours)
            
            check = Check(
                creator_id=creator_id,
                type=check_type,
                total_amount=total_amount,
                amount_per_activation=amount_per_activation,
                remaining_amount=total_amount,
                max_activations=max_activations,
                max_per_user=max_per_user,
                check_code=check_code,
                title=title,
                description=description,
                password=password,
                required_subscription_channel=required_subscription_channel,
                min_user_level=min_user_level,
                expires_at=expires_at
            )
            
            session.add(check)
            await session.commit()
            await session.refresh(check)
            
            logger.info(
                "üí≥ Check created",
                check_id=check.id,
                check_code=check_code,
                creator_id=creator_id,
                amount=float(total_amount),
                activations=max_activations
            )
            
            return check
    
    async def get_check_by_code(self, check_code: str) -> Check | None:
        """–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫ –ø–æ –∫–æ–¥—É"""
        async with get_session() as session:
            result = await session.execute(
                select(Check).where(Check.check_code == check_code.upper())
            )
            return result.scalar_one_or_none()
    
    async def activate_check(
        self,
        check_code: str,
        user_id: int,
        password: str | None = None
    ) -> tuple[bool, str, Decimal]:
        """
        –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—É–º–º–∞)
        """
        
        async with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —á–µ–∫
            check = await self.get_check_by_code(check_code)
            if not check:
                return False, "‚ùå –ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ–∫–∞
            if not check.is_active:
                if check.status == CheckStatus.EXPIRED:
                    return False, "‚è∞ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ–∫–∞ –∏—Å—Ç–µ–∫", Decimal("0")
                elif check.status == CheckStatus.COMPLETED:
                    return False, "‚úÖ –ß–µ–∫ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", Decimal("0")
                elif check.status == CheckStatus.CANCELLED:
                    return False, "‚ùå –ß–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω", Decimal("0")
                else:
                    return False, "‚ùå –ß–µ–∫ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            if check.creator_id == user_id:
                return False, "‚ùå –ù–µ–ª—å–∑—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–∫", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
            if check.password and check.password != password:
                return False, "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user(user_id)
            if not user:
                return False, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            if check.min_user_level:
                level_hierarchy = ["bronze", "silver", "gold", "premium"]
                if user.level not in level_hierarchy:
                    return False, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", Decimal("0")
                
                required_index = level_hierarchy.index(check.min_user_level)
                user_index = level_hierarchy.index(user.level)
                
                if user_index < required_index:
                    level_names = {
                        "bronze": "ü•â Bronze",
                        "silver": "ü•à Silver",
                        "gold": "ü•á Gold", 
                        "premium": "üíé Premium"
                    }
                    required_level = level_names.get(check.min_user_level, check.min_user_level)
                    return False, f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å {required_level}", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_activations = await session.execute(
                select(func.count(CheckActivation.id))
                .where(
                    and_(
                        CheckActivation.check_id == check.id,
                        CheckActivation.user_id == user_id
                    )
                )
            )
            
            user_activation_count = user_activations.scalar() or 0
            if user_activation_count >= check.max_per_user:
                return False, "‚ùå –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç —á–µ–∫", Decimal("0")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            if check.required_subscription_channel:
                # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
                pass
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —á–µ–∫
            activation = CheckActivation(
                check_id=check.id,
                user_id=user_id,
                amount_received=check.amount_per_activation
            )
            
            session.add(activation)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–µ–∫
            check.current_activations += 1
            check.remaining_amount -= check.amount_per_activation
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–∫–∞
            if check.current_activations >= check.max_activations or check.remaining_amount <= 0:
                check.status = CheckStatus.COMPLETED
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é –µ—Å–ª–∏ –µ—Å—Ç—å
                if check.remaining_amount > 0:
                    await self.user_service.unfreeze_balance(
                        check.creator_id,
                        check.remaining_amount,
                        f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ —Å —á–µ–∫–∞ #{check.check_code}"
                    )
            
            # –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            await self.user_service.update_balance(
                user_id,
                check.amount_per_activation,
                TransactionType.CHECK_RECEIVED,
                f"–ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ #{check.check_code}",
                str(check.id),
                "check"
            )
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å —Å–æ–∑–¥–∞—Ç–µ–ª—è (—Ä–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ–º)
            await self.user_service.unfreeze_balance(
                check.creator_id,
                check.amount_per_activation,
                f"–ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ–∫–∞ #{check.check_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º @{user.username or user.telegram_id}"
            )
            
            await session.commit()
            
            logger.info(
                "üí≥ Check activated",
                check_id=check.id,
                check_code=check.check_code,
                user_id=user_id,
                amount=float(check.amount_per_activation)
            )
            
            return True, "‚úÖ –ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", check.amount_per_activation
    
    async def get_user_checks(
        self,
        user_id: int,
        limit: int = 50,
        offset: int = 0
    ) -> list[Check]:
        """–ü–æ–ª—É—á–∏—Ç—å —á–µ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_session() as session:
            result = await session.execute(
                select(Check)
                .where(Check.creator_id == user_id)
                .order_by(desc(Check.created_at))
                .limit(limit)
                .offset(offset)
            )
            return list(result.scalars().all())
    
    async def get_user_activations(
        self,
        user_id: int,
        limit: int = 50,
        offset: int = 0
    ) -> list[CheckActivation]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        async with get_session() as session:
            result = await session.execute(
                select(CheckActivation)
                .where(CheckActivation.user_id == user_id)
                .order_by(desc(CheckActivation.activated_at))
                .limit(limit)
                .offset(offset)
            )
            return list(result.scalars().all())
    
    async def cancel_check(self, check_id: int, creator_id: int) -> bool:
        """–û—Ç–º–µ–Ω–∏—Ç—å —á–µ–∫"""
        async with get_session() as session:
            result = await session.execute(
                select(Check).where(
                    and_(Check.id == check_id, Check.creator_id == creator_id)
                )
            )
            check = result.scalar_one_or_none()
            
            if not check or check.status != CheckStatus.ACTIVE:
                return False
            
            check.status = CheckStatus.CANCELLED
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é
            if check.remaining_amount > 0:
                await self.user_service.unfreeze_balance(
                    creator_id,
                    check.remaining_amount,
                    f"–û—Ç–º–µ–Ω–∞ —á–µ–∫–∞ #{check.check_code}"
                )
            
            await session.commit()
            
            logger.info(
                "‚ùå Check cancelled",
                check_id=check_id,
                check_code=check.check_code,
                creator_id=creator_id
            )
            
            return True
    
    async def get_check_analytics(self, check_id: int) -> dict | None:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —á–µ–∫–∞"""
        async with get_session() as session:
            check = await session.execute(
                select(Check).where(Check.id == check_id)
            )
            check = check.scalar_one_or_none()
            
            if not check:
                return None
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
            activations = await session.execute(
                select(CheckActivation)
                .where(CheckActivation.check_id == check_id)
                .order_by(CheckActivation.activated_at)
            )
            activations_list = list(activations.scalars().all())
            
            return {
                'check': check,
                'total_activations': len(activations_list),
                'total_distributed': float(check.total_amount - check.remaining_amount),
                'completion_percentage': (check.current_activations / check.max_activations * 100) if check.max_activations > 0 else 0,
                'activations': activations_list,
                'is_expired': check.expires_at and datetime.utcnow() > check.expires_at if check.expires_at else False
            }
    
    async def cleanup_expired_checks(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —á–µ–∫–æ–≤"""
        async with get_session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ —á–µ–∫–∏
            expired_checks = await session.execute(
                select(Check).where(
                    and_(
                        Check.status == CheckStatus.ACTIVE,
                        Check.expires_at <= datetime.utcnow()
                    )
                )
            )
            
            count = 0
            for check in expired_checks.scalars():
                check.status = CheckStatus.EXPIRED
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞
                if check.remaining_amount > 0:
                    await self.user_service.unfreeze_balance(
                        check.creator_id,
                        check.remaining_amount,
                        f"–ò—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ —á–µ–∫–∞ #{check.check_code}"
                    )
                
                count += 1
            
            await session.commit()
            
            if count > 0:
                logger.info("üßπ Expired checks cleaned up", count=count)
            
            return count
