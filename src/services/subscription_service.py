from __future__ import annotations

import json
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
import structlog

from app.services.telegram_api_service import TelegramAPIService
from app.config.settings import settings

logger = structlog.get_logger(__name__)

class SubscriptionService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–û–ü)"""
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        # –•—Ä–∞–Ω–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –≤ Redis/–ë–î)
        self.chat_settings: Dict[int, Dict] = {}
    
    def _get_chat_settings(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
        return self.chat_settings.get(chat_id, {
            'required_channels': [],
            'check_duration': None,
            'auto_delete_time': None,
            'referral_check': False,
            'referral_user_id': None,
            'enabled': False
        })
    
    def _save_chat_settings(self, chat_id: int, settings: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
        self.chat_settings[chat_id] = settings
        logger.info("üíæ Chat settings saved", chat_id=chat_id, settings=settings)
    
    async def setup_channel_check(
        self,
        chat_id: int,
        channel_username: str,
        duration_hours: Optional[int] = None
    ) -> tuple[bool, str]:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        /setup @channel [1d|5h|30m]
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        channel_url = f"@{channel_username.lstrip('@')}"
        channel_info = await self.telegram_api.get_chat_info(channel_url)
        
        if not channel_info:
            return False, f"‚ùå –ö–∞–Ω–∞–ª {channel_url} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = self._get_chat_settings(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ
        channel_config = {
            'username': channel_username.lstrip('@'),
            'url': channel_url,
            'title': channel_info.get('title', channel_username),
            'duration_hours': duration_hours,
            'added_at': datetime.utcnow().isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç (–º–∞–∫—Å–∏–º—É–º 5 –∫–∞–Ω–∞–ª–æ–≤)
        if len(settings['required_channels']) >= 5:
            return False, "‚ùå –ú–∞–∫—Å–∏–º—É–º 5 –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª
        for existing in settings['required_channels']:
            if existing['username'] == channel_config['username']:
                return False, f"‚ùå –ö–∞–Ω–∞–ª {channel_url} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–∫—É"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
        settings['required_channels'].append(channel_config)
        settings['enabled'] = True
        
        self._save_chat_settings(chat_id, settings)
        
        duration_text = ""
        if duration_hours:
            duration_text = f" –Ω–∞ {duration_hours} —á."
        
        return True, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_url}{duration_text}"
    
    async def remove_channel_check(
        self,
        chat_id: int,
        channel_username: str = None
    ) -> tuple[bool, str]:
        """
        –£–±—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        /unsetup @channel - —É–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
        /unsetup - —É–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        
        settings = self._get_chat_settings(chat_id)
        
        if not settings['required_channels']:
            return False, "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
        
        if channel_username:
            # –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
            username = channel_username.lstrip('@')
            original_count = len(settings['required_channels'])
            
            settings['required_channels'] = [
                ch for ch in settings['required_channels']
                if ch['username'] != username
            ]
            
            if len(settings['required_channels']) == original_count:
                return False, f"‚ùå –ö–∞–Ω–∞–ª @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö"
            
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            if not settings['required_channels']:
                settings['enabled'] = False
            
            self._save_chat_settings(chat_id, settings)
            return True, f"‚úÖ –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ @{username}"
        else:
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            settings['required_channels'] = []
            settings['enabled'] = False
            
            self._save_chat_settings(chat_id, settings)
            return True, "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
    
    async def setup_referral_check(
        self,
        chat_id: int,
        referral_user_id: int,
        duration_hours: Optional[int] = None
    ) -> tuple[bool, str]:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü
        /setup_bot USER_ID [1d]
        """
        
        settings = self._get_chat_settings(chat_id)
        
        settings['referral_check'] = True
        settings['referral_user_id'] = referral_user_id
        settings['check_duration'] = duration_hours
        settings['enabled'] = True
        
        self._save_chat_settings(chat_id, settings)
        
        duration_text = ""
        if duration_hours:
            duration_text = f" –Ω–∞ {duration_hours} —á."
        
        referral_link = f"https://t.me/{settings.BOT_USERNAME}?start={referral_user_id}"
        
        return True, f"""‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –û–ü{duration_text}

üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}

–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ–¥ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –≥—Ä—É–ø–ø—É."""
    
    async def remove_referral_check(self, chat_id: int) -> tuple[bool, str]:
        """–£–±—Ä–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü"""
        
        settings = self._get_chat_settings(chat_id)
        
        if not settings['referral_check']:
            return False, "‚ùå –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –û–ü –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
        
        settings['referral_check'] = False
        settings['referral_user_id'] = None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –æ—Ç–∫–ª—é—á–∞–µ–º –û–ü
        if not settings['required_channels']:
            settings['enabled'] = False
        
        self._save_chat_settings(chat_id, settings)
        
        return True, "‚úÖ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –û–ü –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    
    async def setup_auto_delete(
        self,
        chat_id: int,
        delete_time_seconds: int
    ) -> tuple[bool, str]:
        """
        –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        /autodelete 30s|2m|5m
        """
        
        if delete_time_seconds < 15 or delete_time_seconds > 300:  # 15 —Å–µ–∫ - 5 –º–∏–Ω
            return False, "‚ùå –í—Ä–µ–º—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è: –æ—Ç 15 —Å–µ–∫—É–Ω–¥ –¥–æ 5 –º–∏–Ω—É—Ç"
        
        settings = self._get_chat_settings(chat_id)
        settings['auto_delete_time'] = delete_time_seconds
        
        self._save_chat_settings(chat_id, settings)
        
        return True, f"‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ {delete_time_seconds} —Å–µ–∫."
    
    async def disable_auto_delete(self, chat_id: int) -> tuple[bool, str]:
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ"""
        
        settings = self._get_chat_settings(chat_id)
        settings['auto_delete_time'] = None
        
        self._save_chat_settings(chat_id, settings)
        
        return True, "‚úÖ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
    
    async def get_status(self, chat_id: int) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –û–ü –≤ —á–∞—Ç–µ"""
        
        settings = self._get_chat_settings(chat_id)
        
        if not settings['enabled']:
            return """üìã <b>–°–¢–ê–¢–£–° –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–û–ö</b>

‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞

üîß <b>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ <code>/setup @channel</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–∞
‚Ä¢ <code>/setup_bot USER_ID</code> - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –û–ü
‚Ä¢ <code>/autodelete 30s</code> - –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        status_text = "üìã <b>–°–¢–ê–¢–£–° –ü–†–û–í–ï–†–ö–ò –ü–û–î–ü–ò–°–û–ö</b>\n\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        if settings['required_channels']:
            status_text += f"\nüì∫ <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ö–ê–ù–ê–õ–´ ({len(settings['required_channels'])}):</b>\n"
            for i, channel in enumerate(settings['required_channels'], 1):
                username = channel['username']
                title = channel.get('title', username)
                duration = channel.get('duration_hours')
                
                duration_text = f" ({duration}—á)" if duration else ""
                status_text += f"{i}. @{username} - {title}{duration_text}\n"
        
        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if settings['referral_check']:
            user_id = settings['referral_user_id']
            duration = settings.get('check_duration')
            duration_text = f" ({duration}—á)" if duration else ""
            
            status_text += f"\nüîó <b>–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –û–ü:</b>\n"
            status_text += f"‚îú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            status_text += f"‚îî –°—Å—ã–ª–∫–∞: https://t.me/{settings.BOT_USERNAME}?start={user_id}{duration_text}\n"
        
        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ
        if settings['auto_delete_time']:
            status_text += f"\n‚åõ <b>–ê–í–¢–û–£–î–ê–õ–ï–ù–ò–ï:</b> {settings['auto_delete_time']} —Å–µ–∫.\n"
        
        status_text += f"\nüîß <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        status_text += f"‚Ä¢ <code>/unsetup</code> - –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ\n"
        status_text += f"‚Ä¢ <code>/unsetup @channel</code> - —É–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª\n"
        status_text += f"‚Ä¢ <code>/unsetup_bot</code> - —É–±—Ä–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –û–ü"
        
        return status_text
    
    async def check_new_member(
        self,
        chat_id: int,
        user_id: int,
        username: str = None
    ) -> tuple[bool, str, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –≥—Ä—É–ø–ø—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ä–∞–∑—Ä–µ—à–µ–Ω_–≤—Ö–æ–¥, —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞—Ä—É—à–µ–Ω–∏—è)
        """
        
        settings = self._get_chat_settings(chat_id)
        
        if not settings['enabled']:
            return True, "", []
        
        violations = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        for channel in settings['required_channels']:
            channel_url = f"@{channel['username']}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            if channel.get('duration_hours'):
                added_time = datetime.fromisoformat(channel['added_at'])
                expires_time = added_time + timedelta(hours=channel['duration_hours'])
                
                if datetime.utcnow() > expires_time:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            is_subscribed = await self.telegram_api.check_user_subscription(
                user_id, channel_url
            )
            
            if not is_subscribed:
                violations.append(f"@{channel['username']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        if settings['referral_check']:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if violations:
            violation_list = "\n".join(f"‚Ä¢ {v}" for v in violations)
            
            message = f"""‚ùå <b>–ù–ï–û–ë–•–û–î–ò–ú–ê –ü–û–î–ü–ò–°–ö–ê</b>

–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:
{violation_list}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞."""
            
            return False, message, violations
        
        return True, "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞", []
    
    async def process_chat_member_update(
        self,
        chat_id: int,
        user_id: int,
        old_status: str,
        new_status: str,
        username: str = None
    ) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_member update
        """
        
        # –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ (left/kicked -> member)
        if old_status in ['left', 'kicked'] and new_status == 'member':
            allowed, message, violations = await self.check_new_member(
                chat_id, user_id, username
            )
            
            if not allowed:
                return {
                    'action': 'restrict',
                    'message': message,
                    'violations': violations,
                    'auto_delete': self._get_chat_settings(chat_id).get('auto_delete_time')
                }
        
        return None
    
    def parse_duration(self, duration_str: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å—ã
        –ü—Ä–∏–º–µ—Ä—ã: 1d -> 24, 5h -> 5, 30m -> 0.5
        """
        
        if not duration_str:
            return None
        
        duration_str = duration_str.lower().strip()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—Ä–µ–º–µ–Ω–∏
        if duration_str.endswith('d'):
            try:
                days = int(duration_str[:-1])
                return days * 24
            except ValueError:
                return None
        elif duration_str.endswith('h'):
            try:
                hours = int(duration_str[:-1])
                return hours
            except ValueError:
                return None
        elif duration_str.endswith('m'):
            try:
                minutes = int(duration_str[:-1])
                return max(1, minutes // 60)  # –ú–∏–Ω–∏–º—É–º 1 —á–∞—Å
            except ValueError:
                return None
        
        return None
    
    def parse_auto_delete_time(self, time_str: str) -> Optional[int]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã
        –ü—Ä–∏–º–µ—Ä—ã: 30s -> 30, 2m -> 120, 5m -> 300
        """
        
        if not time_str:
            return None
        
        time_str = time_str.lower().strip()
        
        if time_str.endswith('s'):
            try:
                seconds = int(time_str[:-1])
                return seconds
            except ValueError:
                return None
        elif time_str.endswith('m'):
            try:
                minutes = int(time_str[:-1])
                return minutes * 60
            except ValueError:
                return None
        
        return None
    
    async def cleanup_expired_checks(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        cleaned_count = 0
        current_time = datetime.utcnow()
        
        for chat_id, settings in list(self.chat_settings.items()):
            if not settings.get('enabled'):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞
            original_channels = settings['required_channels'][:]
            active_channels = []
            
            for channel in original_channels:
                if channel.get('duration_hours'):
                    added_time = datetime.fromisoformat(channel['added_at'])
                    expires_time = added_time + timedelta(hours=channel['duration_hours'])
                    
                    if current_time <= expires_time:
                        active_channels.append(channel)
                    else:
                        cleaned_count += 1
                        logger.info(
                            "üßπ Expired channel check removed",
                            chat_id=chat_id,
                            channel=channel['username']
                        )
                else:
                    active_channels.append(channel)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            settings['required_channels'] = active_channels
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –û–ü –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            if not active_channels and not settings.get('referral_check'):
                settings['enabled'] = False
            
            self._save_chat_settings(chat_id, settings)
        
        if cleaned_count > 0:
            logger.info("üßπ Cleanup completed", expired_checks=cleaned_count)
        
        return cleaned_count
    
    async def get_chat_analytics(self, chat_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –û–ü –¥–ª—è —á–∞—Ç–∞"""
        
        settings = self._get_chat_settings(chat_id)
        
        analytics = {
            'enabled': settings['enabled'],
            'channels_count': len(settings.get('required_channels', [])),
            'referral_check': settings.get('referral_check', False),
            'auto_delete_enabled': settings.get('auto_delete_time') is not None,
            'channels': []
        }
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        for channel in settings.get('required_channels', []):
            channel_stats = await self.telegram_api.get_channel_stats(f"@{channel['username']}")
            
            channel_analytics = {
                'username': channel['username'],
                'title': channel.get('title'),
                'member_count': channel_stats.get('member_count', 0) if channel_stats else 0,
                'duration_hours': channel.get('duration_hours'),
                'added_at': channel.get('added_at'),
                'is_expired': False
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ
            if channel.get('duration_hours'):
                added_time = datetime.fromisoformat(channel['added_at'])
                expires_time = added_time + timedelta(hours=channel['duration_hours'])
                channel_analytics['is_expired'] = datetime.utcnow() > expires_time
            
            analytics['channels'].append(channel_analytics)
        
        return analytics
