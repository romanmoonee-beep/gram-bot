import aiohttp
import asyncio
from typing import Optional, Dict, Any, List
import structlog
from urllib.parse import urlparse
import re

from app.config.settings import settings

logger = structlog.get_logger(__name__)

class TelegramAPIService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self, bot_token: str = None):
        self.bot_token = bot_token or settings.BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def _make_request(self, method: str, params: dict = None) -> Optional[dict]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API"""
        url = f"{self.api_url}/{method}"
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=params or {}) as response:
                    result = await response.json()
                    
                    if result.get("ok"):
                        return result.get("result")
                    else:
                        logger.error(
                            "‚ùå Telegram API error",
                            method=method,
                            error=result.get("description"),
                            error_code=result.get("error_code")
                        )
                        return None
                        
        except Exception as e:
            logger.error("üí• Telegram API request failed", method=method, error=str(e))
            return None
    
    def _parse_telegram_url(self, url: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ Telegram URL –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        url = url.strip()
        
        # –£–±–∏—Ä–∞–µ–º t.me/ –∏ –ø–æ–ª—É—á–∞–µ–º username
        patterns = [
            r'https?://t\.me/([^/\s]+)/?$',  # https://t.me/username
            r'https?://t\.me/([^/\s]+)/(\d+)/?$',  # https://t.me/username/123 (–ø–æ—Å—Ç)
            r'@([a-zA-Z0-9_]+)',  # @username
            r'https?://t\.me/joinchat/([a-zA-Z0-9_-]+)',  # invite link
            r'https?://t\.me/\+([a-zA-Z0-9_-]+)'  # new invite format
        ]
        
        for pattern in patterns:
            match = re.match(pattern, url)
            if match:
                if 'joinchat' in pattern or '+' in pattern:
                    return {
                        'type': 'invite_link',
                        'invite_link': url,
                        'hash': match.group(1)
                    }
                elif len(match.groups()) == 2:  # Post URL
                    return {
                        'type': 'post',
                        'username': match.group(1),
                        'message_id': int(match.group(2))
                    }
                else:  # Channel/Group username
                    username = match.group(1).lstrip('@')
                    return {
                        'type': 'username',
                        'username': username
                    }
        
        return {'type': 'unknown', 'url': url}
    
    async def check_user_subscription(self, user_id: int, channel_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
        parsed = self._parse_telegram_url(channel_url)
        
        if parsed['type'] not in ['username', 'invite_link']:
            logger.warning("‚ùå Invalid channel URL format", url=channel_url)
            return False
        
        chat_id = f"@{parsed['username']}" if parsed['type'] == 'username' else parsed.get('invite_link')
        
        try:
            result = await self._make_request(
                "getChatMember",
                {
                    "chat_id": chat_id,
                    "user_id": user_id
                }
            )
            
            if result:
                status = result.get("status")
                # –°—á–∏—Ç–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏: creator, administrator, member
                subscribed_statuses = ["creator", "administrator", "member"]
                is_subscribed = status in subscribed_statuses
                
                logger.info(
                    "‚úÖ Subscription check completed",
                    user_id=user_id,
                    channel=chat_id,
                    status=status,
                    is_subscribed=is_subscribed
                )
                
                return is_subscribed
            
            return False
            
        except Exception as e:
            logger.error(
                "üí• Subscription check failed",
                user_id=user_id,
                channel=chat_id,
                error=str(e)
            )
            return False
    
    async def check_user_in_group(self, user_id: int, group_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
        return await self.check_user_subscription(user_id, group_url)
    
    async def get_chat_info(self, chat_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ"""
        parsed = self._parse_telegram_url(chat_url)
        
        if parsed['type'] != 'username':
            return None
        
        chat_id = f"@{parsed['username']}"
        
        try:
            result = await self._make_request("getChat", {"chat_id": chat_id})
            
            if result:
                return {
                    'id': result.get('id'),
                    'type': result.get('type'),
                    'title': result.get('title'),
                    'username': result.get('username'),
                    'description': result.get('description'),
                    'member_count': result.get('members_count', 0)
                }
            
            return None
            
        except Exception as e:
            logger.error("üí• Get chat info failed", chat_url=chat_url, error=str(e))
            return None
    
    async def validate_post_url(self, post_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
        parsed = self._parse_telegram_url(post_url)
        
        if parsed['type'] != 'post':
            return False
        
        chat_id = f"@{parsed['username']}"
        message_id = parsed['message_id']
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
            result = await self._make_request(
                "forwardMessage",
                {
                    "chat_id": "@durov",  # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç
                    "from_chat_id": chat_id,
                    "message_id": message_id
                }
            )
            
            # –ï—Å–ª–∏ –ø–æ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, API –≤–µ—Ä–Ω–µ—Ç –æ—à–∏–±–∫—É –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ @durov
            # –ï—Å–ª–∏ –ø–æ—Å—Ç–∞ –Ω–µ—Ç, –±—É–¥–µ—Ç –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            return True  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            
        except Exception as e:
            logger.warning("‚ö†Ô∏è Post validation failed", post_url=post_url, error=str(e))
            return False
    
    async def check_post_reaction(self, user_id: int, post_url: str, required_reactions: List[str] = None) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ—Å—Ç
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Telegram Bot API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä—è–º–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–π
        –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        """
        parsed = self._parse_telegram_url(post_url)
        
        if parsed['type'] != 'post':
            return False
        
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MTProto API –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤–µ—Ä—É
        logger.info(
            "‚ÑπÔ∏è Post reaction check requested (limited API support)",
            user_id=user_id,
            post_url=post_url,
            required_reactions=required_reactions
        )
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å:
        # 1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MTProto
        # 2. –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
        # 3. –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
        return True
    
    async def validate_bot_url(self, bot_url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"""
        parsed = self._parse_telegram_url(bot_url)
        
        if parsed['type'] != 'username':
            return False
        
        username = parsed['username']
        
        # –ë–æ—Ç—ã –æ–±—ã—á–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ 'bot'
        if not username.lower().endswith('bot'):
            return False
        
        try:
            chat_info = await self.get_chat_info(bot_url)
            return chat_info is not None and chat_info.get('type') == 'private'
            
        except Exception as e:
            logger.error("üí• Bot validation failed", bot_url=bot_url, error=str(e))
            return False
    
    async def bulk_check_subscriptions(
        self, 
        user_ids: List[int], 
        channel_url: str
    ) -> Dict[int, bool]:
        """–ú–∞—Å—Å–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        results = {}
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        semaphore = asyncio.Semaphore(5)
        
        async def check_single_user(user_id: int):
            async with semaphore:
                result = await self.check_user_subscription(user_id, channel_url)
                results[user_id] = result
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
                await asyncio.sleep(0.1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [check_single_user(user_id) for user_id in user_ids]
        await asyncio.gather(*tasks, return_exceptions=True)
        
        logger.info(
            "üìä Bulk subscription check completed",
            total_users=len(user_ids),
            subscribed_count=sum(results.values()),
            channel=channel_url
        )
        
        return results
    
    async def get_channel_stats(self, channel_url: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞"""
        chat_info = await self.get_chat_info(channel_url)
        
        if not chat_info:
            return None
        
        return {
            'member_count': chat_info.get('member_count', 0),
            'title': chat_info.get('title'),
            'type': chat_info.get('type'),
            'username': chat_info.get('username'),
            'description': chat_info.get('description')
        }
    
    async def check_admin_rights(self, chat_url: str, user_id: int) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
        parsed = self._parse_telegram_url(chat_url)
        
        if parsed['type'] != 'username':
            return {'is_admin': False}
        
        chat_id = f"@{parsed['username']}"
        
        try:
            result = await self._make_request(
                "getChatMember",
                {
                    "chat_id": chat_id,
                    "user_id": user_id
                }
            )
            
            if result:
                status = result.get("status")
                is_admin = status in ["creator", "administrator"]
                
                rights = {
                    'is_admin': is_admin,
                    'status': status,
                    'can_delete_messages': result.get('can_delete_messages', False),
                    'can_restrict_members': result.get('can_restrict_members', False),
                    'can_promote_members': result.get('can_promote_members', False),
                    'can_change_info': result.get('can_change_info', False),
                    'can_invite_users': result.get('can_invite_users', False),
                    'can_pin_messages': result.get('can_pin_messages', False)
                }
                
                return rights
            
            return {'is_admin': False}
            
        except Exception as e:
            logger.error("üí• Admin rights check failed", chat_url=chat_url, error=str(e))
            return {'is_admin': False}
