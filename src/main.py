import asyncio
import logging
import sys

import structlog
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import BotCommand
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

from app.config.settings import settings
from app.database.database import init_db
from app.bot.handlers import register_all_handlers
from app.bot.middlewares import register_all_middlewares

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.contextvars.merge_contextvars,
        structlog.processors.add_log_level,
        structlog.processors.StackInfoRenderer(),
        structlog.dev.set_exc_info,
        structlog.processors.TimeStamper(fmt="ISO"),
        structlog.dev.ConsoleRenderer() if settings.DEBUG else structlog.processors.JSONRenderer(),
    ],
    wrapper_class=structlog.make_filtering_bound_logger(
        logging.INFO if not settings.DEBUG else logging.DEBUG
    ),
    logger_factory=structlog.WriteLoggerFactory(),
    cache_logger_on_first_use=False,
)

logger = structlog.get_logger(__name__)

async def create_bot() -> Bot:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    return Bot(
        token=settings.BOT_TOKEN,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
            link_preview_is_disabled=True,
            protect_content=False
        )
    )

async def create_dispatcher() -> Dispatcher:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å Redis —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    storage = RedisStorage.from_url(settings.REDIS_URL)
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares –∏ handlers
    register_all_middlewares(dp)
    register_all_handlers(dp)
    
    return dp

async def set_bot_commands(bot: Bot) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        BotCommand(command="menu", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="profile", description="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="earn", description="üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"),
        BotCommand(command="advertise", description="üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å"),
        BotCommand(command="referral", description="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"),
        BotCommand(command="balance", description="üí∞ –ë–∞–ª–∞–Ω—Å"),
    ]
    
    await bot.set_my_commands(commands)

async def on_startup(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("üöÄ Starting PR GRAM Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    logger.info("‚úÖ Database initialized")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await set_bot_commands(bot)
    logger.info("‚úÖ Bot commands set")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = await bot.get_me()
    logger.info(
        "ü§ñ Bot started successfully",
        username=bot_info.username,
        first_name=bot_info.first_name,
        id=bot_info.id,
        environment=settings.ENVIRONMENT
    )

async def on_shutdown(bot: Bot) -> None:
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë Shutting down PR GRAM Bot...")
    
    # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    await bot.delete_webhook(drop_pending_updates=True)
    
    logger.info("‚úÖ Bot stopped gracefully")

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = await create_bot()
        dp = await create_dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º startup/shutdown handlers
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)
        
        if settings.WEBHOOK_URL and not settings.DEBUG:
            # Webhook —Ä–µ–∂–∏–º (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω)
            logger.info("üåê Starting in webhook mode", webhook_url=settings.WEBHOOK_URL)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
            webhook_requests_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
                secret_token=settings.WEBHOOK_SECRET
            )
            
            # –°–æ–∑–¥–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()
            webhook_requests_handler.register(app, path="/webhook")
            setup_application(app, dp, bot=bot)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await bot.set_webhook(
                url=f"{settings.WEBHOOK_URL}/webhook",
                secret_token=settings.WEBHOOK_SECRET,
                drop_pending_updates=True
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            web.run_app(app, host="0.0.0.0", port=8000)
        else:
            # Polling —Ä–µ–∂–∏–º (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
            logger.info("üîÑ Starting in polling mode")
            
            await dp.start_polling(
                bot,
                allowed_updates=dp.resolve_used_update_types(),
                drop_pending_updates=True
            )
            
    except Exception as e:
        logger.error("üí• Fatal error during bot execution", error=str(e), exc_info=True)
        sys.exit(1)
    finally:
        if 'bot' in locals():
            await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error("üí• Unexpected error", error=str(e), exc_info=True)
        sys.exit(1)